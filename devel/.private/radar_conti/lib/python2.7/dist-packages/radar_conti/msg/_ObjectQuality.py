# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/ObjectQuality.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ObjectQuality(genpy.Message):
  _md5sum = "5d06c6b873d996c1cd9ff22fc03970e4"
  _type = "radar_conti/ObjectQuality"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  ------------------------------------------------------------------------
#
#  Name:       Obj_2_Quality
#  Id:         0x60c
#  Length:     7 bytes
#  Cycle time: 0 ms
#  Senders:    ARS_ISF
#  Layout:
#
#                          Bit
#
#             7   6   5   4   3   2   1   0
#           +---+---+---+---+---+---+---+---+
#         0 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Obj_ID
#           +---+---+---+---+---+---+---+---+
#         1 |<-----------------x|<----------|
#           +---+---+---+---+---+---+---+---+
#                             +-- Obj_DistLong_rms
#           +---+---+---+---+---+---+---+---+
#         2 |------x|<-----------------x|<--|
#           +---+---+---+---+---+---+---+---+
#                 |                   +-- Obj_VrelLong_rms
#                 +-- Obj_DistLat_rms
#     B     +---+---+---+---+---+---+---+---+
#     y   3 |--------------x|<--------------|
#     t     +---+---+---+---+---+---+---+---+
#     e                   +-- Obj_VrelLat_rms
#           +---+---+---+---+---+---+---+---+
#         4 |--x|<-----------------x|<------|
#           +---+---+---+---+---+---+---+---+
#             |                   +-- Obj_ArelLat_rms
#             +-- Obj_ArelLong_rms
#           +---+---+---+---+---+---+---+---+
#         5 |----------x|   |   |   |   |   |
#           +---+---+---+---+---+---+---+---+
#                     +-- Obj_Orientation_rms
#           +---+---+---+---+---+---+---+---+
#         6 |<---------x|<---------x|   |   |
#           +---+---+---+---+---+---+---+---+
#                     |           +-- Obj_MeasState
#                     +-- Obj_ProbOfExist
#
#  Signal tree:
#
#    -- {root}
#       +-- Obj_ID
#       +-- Obj_DistLong_rms
#       +-- Obj_DistLat_rms
#       +-- Obj_VrelLong_rms
#       +-- Obj_VrelLat_rms
#       +-- Obj_ArelLong_rms
#       +-- Obj_ArelLat_rms
#       +-- Obj_Orientation_rms
#       +-- Obj_ProbOfExist
#       +-- Obj_MeasState
#
#  ------------------------------------------------------------------------
std_msgs/Float64 obj_distlong_rms
std_msgs/Float64 obj_distlat_rms
std_msgs/Float64 obj_vrellong_rms
std_msgs/Float64 obj_vrellat_rms
std_msgs/Float64 obj_arellong_rms
std_msgs/Float64 obj_arellat_rms
std_msgs/Float64 obj_orientation_rms
std_msgs/Float64 obj_probofexist
std_msgs/String  obj_measstate
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['obj_distlong_rms','obj_distlat_rms','obj_vrellong_rms','obj_vrellat_rms','obj_arellong_rms','obj_arellat_rms','obj_orientation_rms','obj_probofexist','obj_measstate']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obj_distlong_rms,obj_distlat_rms,obj_vrellong_rms,obj_vrellat_rms,obj_arellong_rms,obj_arellat_rms,obj_orientation_rms,obj_probofexist,obj_measstate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectQuality, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obj_distlong_rms is None:
        self.obj_distlong_rms = std_msgs.msg.Float64()
      if self.obj_distlat_rms is None:
        self.obj_distlat_rms = std_msgs.msg.Float64()
      if self.obj_vrellong_rms is None:
        self.obj_vrellong_rms = std_msgs.msg.Float64()
      if self.obj_vrellat_rms is None:
        self.obj_vrellat_rms = std_msgs.msg.Float64()
      if self.obj_arellong_rms is None:
        self.obj_arellong_rms = std_msgs.msg.Float64()
      if self.obj_arellat_rms is None:
        self.obj_arellat_rms = std_msgs.msg.Float64()
      if self.obj_orientation_rms is None:
        self.obj_orientation_rms = std_msgs.msg.Float64()
      if self.obj_probofexist is None:
        self.obj_probofexist = std_msgs.msg.Float64()
      if self.obj_measstate is None:
        self.obj_measstate = std_msgs.msg.String()
    else:
      self.obj_distlong_rms = std_msgs.msg.Float64()
      self.obj_distlat_rms = std_msgs.msg.Float64()
      self.obj_vrellong_rms = std_msgs.msg.Float64()
      self.obj_vrellat_rms = std_msgs.msg.Float64()
      self.obj_arellong_rms = std_msgs.msg.Float64()
      self.obj_arellat_rms = std_msgs.msg.Float64()
      self.obj_orientation_rms = std_msgs.msg.Float64()
      self.obj_probofexist = std_msgs.msg.Float64()
      self.obj_measstate = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.obj_distlong_rms.data, _x.obj_distlat_rms.data, _x.obj_vrellong_rms.data, _x.obj_vrellat_rms.data, _x.obj_arellong_rms.data, _x.obj_arellat_rms.data, _x.obj_orientation_rms.data, _x.obj_probofexist.data))
      _x = self.obj_measstate.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obj_distlong_rms is None:
        self.obj_distlong_rms = std_msgs.msg.Float64()
      if self.obj_distlat_rms is None:
        self.obj_distlat_rms = std_msgs.msg.Float64()
      if self.obj_vrellong_rms is None:
        self.obj_vrellong_rms = std_msgs.msg.Float64()
      if self.obj_vrellat_rms is None:
        self.obj_vrellat_rms = std_msgs.msg.Float64()
      if self.obj_arellong_rms is None:
        self.obj_arellong_rms = std_msgs.msg.Float64()
      if self.obj_arellat_rms is None:
        self.obj_arellat_rms = std_msgs.msg.Float64()
      if self.obj_orientation_rms is None:
        self.obj_orientation_rms = std_msgs.msg.Float64()
      if self.obj_probofexist is None:
        self.obj_probofexist = std_msgs.msg.Float64()
      if self.obj_measstate is None:
        self.obj_measstate = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.obj_distlong_rms.data, _x.obj_distlat_rms.data, _x.obj_vrellong_rms.data, _x.obj_vrellat_rms.data, _x.obj_arellong_rms.data, _x.obj_arellat_rms.data, _x.obj_orientation_rms.data, _x.obj_probofexist.data,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obj_measstate.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obj_measstate.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.obj_distlong_rms.data, _x.obj_distlat_rms.data, _x.obj_vrellong_rms.data, _x.obj_vrellat_rms.data, _x.obj_arellong_rms.data, _x.obj_arellat_rms.data, _x.obj_orientation_rms.data, _x.obj_probofexist.data))
      _x = self.obj_measstate.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obj_distlong_rms is None:
        self.obj_distlong_rms = std_msgs.msg.Float64()
      if self.obj_distlat_rms is None:
        self.obj_distlat_rms = std_msgs.msg.Float64()
      if self.obj_vrellong_rms is None:
        self.obj_vrellong_rms = std_msgs.msg.Float64()
      if self.obj_vrellat_rms is None:
        self.obj_vrellat_rms = std_msgs.msg.Float64()
      if self.obj_arellong_rms is None:
        self.obj_arellong_rms = std_msgs.msg.Float64()
      if self.obj_arellat_rms is None:
        self.obj_arellat_rms = std_msgs.msg.Float64()
      if self.obj_orientation_rms is None:
        self.obj_orientation_rms = std_msgs.msg.Float64()
      if self.obj_probofexist is None:
        self.obj_probofexist = std_msgs.msg.Float64()
      if self.obj_measstate is None:
        self.obj_measstate = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.obj_distlong_rms.data, _x.obj_distlat_rms.data, _x.obj_vrellong_rms.data, _x.obj_vrellat_rms.data, _x.obj_arellong_rms.data, _x.obj_arellat_rms.data, _x.obj_orientation_rms.data, _x.obj_probofexist.data,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obj_measstate.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obj_measstate.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
