# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/ClusterStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ClusterStatus(genpy.Message):
  _md5sum = "9f2a6f691f628cc21b647de1bb56d9b7"
  _type = "radar_conti/ClusterStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  ------------------------------------------------------------------------
#
#  Name:       Cluster_0_Status
#  Id:         0x600
#  Length:     5 bytes
#  Cycle time: 0 ms
#  Senders:    ARS_ISF
#  Layout:
#
#                          Bit
#
#             7   6   5   4   3   2   1   0
#           +---+---+---+---+---+---+---+---+
#         0 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Cluster_NofClustersNear
#           +---+---+---+---+---+---+---+---+
#         1 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#     B                                   +-- Cluster_NofClustersFar
#     y     +---+---+---+---+---+---+---+---+
#     t   2 |<------------------------------|
#     e     +---+---+---+---+---+---+---+---+
#         3 |------------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Cluster_MeasCounter
#           +---+---+---+---+---+---+---+---+
#         4 |<-------------x|   |   |   |   |
#           +---+---+---+---+---+---+---+---+
#                         +-- Cluster_InterfaceVersion
#
#  Signal tree:
#
#    -- {root}
#       +-- Cluster_NofClustersNear
#       +-- Cluster_NofClustersFar
#       +-- Cluster_MeasCounter
#       +-- Cluster_InterfaceVersion
#
#  ------------------------------------------------------------------------
#
std_msgs/Int32 cluster_nofclustersnear
std_msgs/Int32 cluster_nofclustersfar
std_msgs/Int32 cluster_meascounter
std_msgs/Int32 cluster_interfaceversion
================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['cluster_nofclustersnear','cluster_nofclustersfar','cluster_meascounter','cluster_interfaceversion']
  _slot_types = ['std_msgs/Int32','std_msgs/Int32','std_msgs/Int32','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cluster_nofclustersnear,cluster_nofclustersfar,cluster_meascounter,cluster_interfaceversion

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClusterStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cluster_nofclustersnear is None:
        self.cluster_nofclustersnear = std_msgs.msg.Int32()
      if self.cluster_nofclustersfar is None:
        self.cluster_nofclustersfar = std_msgs.msg.Int32()
      if self.cluster_meascounter is None:
        self.cluster_meascounter = std_msgs.msg.Int32()
      if self.cluster_interfaceversion is None:
        self.cluster_interfaceversion = std_msgs.msg.Int32()
    else:
      self.cluster_nofclustersnear = std_msgs.msg.Int32()
      self.cluster_nofclustersfar = std_msgs.msg.Int32()
      self.cluster_meascounter = std_msgs.msg.Int32()
      self.cluster_interfaceversion = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.cluster_nofclustersnear.data, _x.cluster_nofclustersfar.data, _x.cluster_meascounter.data, _x.cluster_interfaceversion.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cluster_nofclustersnear is None:
        self.cluster_nofclustersnear = std_msgs.msg.Int32()
      if self.cluster_nofclustersfar is None:
        self.cluster_nofclustersfar = std_msgs.msg.Int32()
      if self.cluster_meascounter is None:
        self.cluster_meascounter = std_msgs.msg.Int32()
      if self.cluster_interfaceversion is None:
        self.cluster_interfaceversion = std_msgs.msg.Int32()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.cluster_nofclustersnear.data, _x.cluster_nofclustersfar.data, _x.cluster_meascounter.data, _x.cluster_interfaceversion.data,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.cluster_nofclustersnear.data, _x.cluster_nofclustersfar.data, _x.cluster_meascounter.data, _x.cluster_interfaceversion.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cluster_nofclustersnear is None:
        self.cluster_nofclustersnear = std_msgs.msg.Int32()
      if self.cluster_nofclustersfar is None:
        self.cluster_nofclustersfar = std_msgs.msg.Int32()
      if self.cluster_meascounter is None:
        self.cluster_meascounter = std_msgs.msg.Int32()
      if self.cluster_interfaceversion is None:
        self.cluster_interfaceversion = std_msgs.msg.Int32()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.cluster_nofclustersnear.data, _x.cluster_nofclustersfar.data, _x.cluster_meascounter.data, _x.cluster_interfaceversion.data,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
