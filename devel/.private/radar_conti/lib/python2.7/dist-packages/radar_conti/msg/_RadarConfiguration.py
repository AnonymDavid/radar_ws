# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/RadarConfiguration.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RadarConfiguration(genpy.Message):
  _md5sum = "ab23258a6bff274c2b84163d46a17846"
  _type = "radar_conti/RadarConfiguration"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#  ------------------------------------------------------------------------
#
#  Name:       RadarConfiguration
#  Id:         0x200
#  Length:     8 bytes
#  Cycle time: 0 ms
#  Senders:    ExternalUnit
#  Layout:
#
#                          Bit
#
#             7   6   5   4   3   2   1   0
#           +---+---+---+---+---+---+---+---+
#         0 |<-x|<-x|<-x|<-x|<-x|<-x|<-x|<-x|
#           +---+---+---+---+---+---+---+---+
#             |   |   |   |   |   |   |   +-- RadarCfg_MaxDistance_valid
#             |   |   |   |   |   |   +-- RadarCfg_SensorID_valid
#             |   |   |   |   |   +-- RadarCfg_RadarPower_valid
#             |   |   |   |   +-- RadarCfg_OutputType_valid
#             |   |   |   +-- RadarCfg_SendQuality_valid
#             |   |   +-- RadarCfg_SendExtInfo_valid
#             |   +-- RadarCfg_SortIndex_valid
#             +-- RadarCfg_StoreInNVM_valid
#           +---+---+---+---+---+---+---+---+
#         1 |<------------------------------|
#           +---+---+---+---+---+---+---+---+
#         2 |------x|   |   |   |   |   |   |
#           +---+---+---+---+---+---+---+---+
#                 +-- RadarCfg_MaxDistance
#           +---+---+---+---+---+---+---+---+
#         3 |   |   |   |   |   |   |   |   |
#     B     +---+---+---+---+---+---+---+---+
#     y   4 |<---------x|<-----x|<---------x|
#     t     +---+---+---+---+---+---+---+---+
#     e               |       |           +-- RadarCfg_SensorID
#                     |       +-- RadarCfg_OutputType
#                     +-- RadarCfg_RadarPower
#           +---+---+---+---+---+---+---+---+
#         5 |<-x|<---------x|<-x|<-x|<-x|<-x|
#           +---+---+---+---+---+---+---+---+
#             |           |   |   |   |   +-- RadarCfg_CtrlRelay_valid
#             |           |   |   |   +-- RadarCfg_CtrlRelay
#             |           |   |   +-- RadarCfg_SendQuality
#             |           |   +-- RadarCfg_SendExtInfo
#             |           +-- RadarCfg_SortIndex
#             +-- RadarCfg_StoreInNVM
#           +---+---+---+---+---+---+---+---+
#         6 |   |   |   |   |<---------x|<-x|
#           +---+---+---+---+---+---+---+---+
#                                     |   +-- RadarCfg_RCS_Threshold_valid
#                                     +-- RadarCfg_RCS_Threshold
#           +---+---+---+---+---+---+---+---+
#         7 |   |   |   |   |   |   |   |   |
#           +---+---+---+---+---+---+---+---+
#
#  Signal tree:
#
#    -- {root}
#       +-- RadarCfg_StoreInNVM_valid
#       +-- RadarCfg_SortIndex_valid
#       +-- RadarCfg_SendExtInfo_valid
#       +-- RadarCfg_SendQuality_valid
#       +-- RadarCfg_OutputType_valid
#       +-- RadarCfg_RadarPower_valid
#       +-- RadarCfg_SensorID_valid
#       +-- RadarCfg_MaxDistance_valid
#       +-- RadarCfg_MaxDistance
#       +-- RadarCfg_RadarPower
#       +-- RadarCfg_OutputType
#       +-- RadarCfg_SensorID
#       +-- RadarCfg_StoreInNVM
#       +-- RadarCfg_SortIndex
#       +-- RadarCfg_SendExtInfo
#       +-- RadarCfg_SendQuality
#       +-- RadarCfg_CtrlRelay
#       +-- RadarCfg_CtrlRelay_valid
#       +-- RadarCfg_RCS_Threshold
#       +-- RadarCfg_RCS_Threshold_valid
#
#  ------------------------------------------------------------------------
#

std_msgs/Header header
std_msgs/UInt8 radarcfg_storeinnvm_valid
std_msgs/UInt8 radarcfg_sortindex_valid
std_msgs/UInt8 radarcfg_sendextinfo_valid
std_msgs/UInt8 radarcfg_sendquality_valid
std_msgs/UInt8 radarcfg_outputtype_valid
std_msgs/UInt8 radarcfg_radarpower_valid
std_msgs/UInt8 radarcfg_sensorid_valid
std_msgs/UInt8 radarcfg_maxdistance_valid
std_msgs/UInt8 radarcfg_maxdistance
std_msgs/UInt8 radarcfg_radarpower
std_msgs/UInt8 radarcfg_outputtype
std_msgs/UInt8 radarcfg_sensorid
std_msgs/UInt8 radarcfg_storeinnvm
std_msgs/UInt8 radarcfg_sortindex
std_msgs/UInt8 radarcfg_sendextinfo
std_msgs/UInt8 radarcfg_sendquality
std_msgs/UInt8 radarcfg_ctrlrelay
std_msgs/UInt8 radarcfg_ctrlrelay_valid
std_msgs/UInt8 radarcfg_rcs_threshold
std_msgs/UInt8 radarcfg_rcs_threshold_valid
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/UInt8
uint8 data
"""
  __slots__ = ['header','radarcfg_storeinnvm_valid','radarcfg_sortindex_valid','radarcfg_sendextinfo_valid','radarcfg_sendquality_valid','radarcfg_outputtype_valid','radarcfg_radarpower_valid','radarcfg_sensorid_valid','radarcfg_maxdistance_valid','radarcfg_maxdistance','radarcfg_radarpower','radarcfg_outputtype','radarcfg_sensorid','radarcfg_storeinnvm','radarcfg_sortindex','radarcfg_sendextinfo','radarcfg_sendquality','radarcfg_ctrlrelay','radarcfg_ctrlrelay_valid','radarcfg_rcs_threshold','radarcfg_rcs_threshold_valid']
  _slot_types = ['std_msgs/Header','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,radarcfg_storeinnvm_valid,radarcfg_sortindex_valid,radarcfg_sendextinfo_valid,radarcfg_sendquality_valid,radarcfg_outputtype_valid,radarcfg_radarpower_valid,radarcfg_sensorid_valid,radarcfg_maxdistance_valid,radarcfg_maxdistance,radarcfg_radarpower,radarcfg_outputtype,radarcfg_sensorid,radarcfg_storeinnvm,radarcfg_sortindex,radarcfg_sendextinfo,radarcfg_sendquality,radarcfg_ctrlrelay,radarcfg_ctrlrelay_valid,radarcfg_rcs_threshold,radarcfg_rcs_threshold_valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarConfiguration, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radarcfg_storeinnvm_valid is None:
        self.radarcfg_storeinnvm_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sortindex_valid is None:
        self.radarcfg_sortindex_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sendextinfo_valid is None:
        self.radarcfg_sendextinfo_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sendquality_valid is None:
        self.radarcfg_sendquality_valid = std_msgs.msg.UInt8()
      if self.radarcfg_outputtype_valid is None:
        self.radarcfg_outputtype_valid = std_msgs.msg.UInt8()
      if self.radarcfg_radarpower_valid is None:
        self.radarcfg_radarpower_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sensorid_valid is None:
        self.radarcfg_sensorid_valid = std_msgs.msg.UInt8()
      if self.radarcfg_maxdistance_valid is None:
        self.radarcfg_maxdistance_valid = std_msgs.msg.UInt8()
      if self.radarcfg_maxdistance is None:
        self.radarcfg_maxdistance = std_msgs.msg.UInt8()
      if self.radarcfg_radarpower is None:
        self.radarcfg_radarpower = std_msgs.msg.UInt8()
      if self.radarcfg_outputtype is None:
        self.radarcfg_outputtype = std_msgs.msg.UInt8()
      if self.radarcfg_sensorid is None:
        self.radarcfg_sensorid = std_msgs.msg.UInt8()
      if self.radarcfg_storeinnvm is None:
        self.radarcfg_storeinnvm = std_msgs.msg.UInt8()
      if self.radarcfg_sortindex is None:
        self.radarcfg_sortindex = std_msgs.msg.UInt8()
      if self.radarcfg_sendextinfo is None:
        self.radarcfg_sendextinfo = std_msgs.msg.UInt8()
      if self.radarcfg_sendquality is None:
        self.radarcfg_sendquality = std_msgs.msg.UInt8()
      if self.radarcfg_ctrlrelay is None:
        self.radarcfg_ctrlrelay = std_msgs.msg.UInt8()
      if self.radarcfg_ctrlrelay_valid is None:
        self.radarcfg_ctrlrelay_valid = std_msgs.msg.UInt8()
      if self.radarcfg_rcs_threshold is None:
        self.radarcfg_rcs_threshold = std_msgs.msg.UInt8()
      if self.radarcfg_rcs_threshold_valid is None:
        self.radarcfg_rcs_threshold_valid = std_msgs.msg.UInt8()
    else:
      self.header = std_msgs.msg.Header()
      self.radarcfg_storeinnvm_valid = std_msgs.msg.UInt8()
      self.radarcfg_sortindex_valid = std_msgs.msg.UInt8()
      self.radarcfg_sendextinfo_valid = std_msgs.msg.UInt8()
      self.radarcfg_sendquality_valid = std_msgs.msg.UInt8()
      self.radarcfg_outputtype_valid = std_msgs.msg.UInt8()
      self.radarcfg_radarpower_valid = std_msgs.msg.UInt8()
      self.radarcfg_sensorid_valid = std_msgs.msg.UInt8()
      self.radarcfg_maxdistance_valid = std_msgs.msg.UInt8()
      self.radarcfg_maxdistance = std_msgs.msg.UInt8()
      self.radarcfg_radarpower = std_msgs.msg.UInt8()
      self.radarcfg_outputtype = std_msgs.msg.UInt8()
      self.radarcfg_sensorid = std_msgs.msg.UInt8()
      self.radarcfg_storeinnvm = std_msgs.msg.UInt8()
      self.radarcfg_sortindex = std_msgs.msg.UInt8()
      self.radarcfg_sendextinfo = std_msgs.msg.UInt8()
      self.radarcfg_sendquality = std_msgs.msg.UInt8()
      self.radarcfg_ctrlrelay = std_msgs.msg.UInt8()
      self.radarcfg_ctrlrelay_valid = std_msgs.msg.UInt8()
      self.radarcfg_rcs_threshold = std_msgs.msg.UInt8()
      self.radarcfg_rcs_threshold_valid = std_msgs.msg.UInt8()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_20B().pack(_x.radarcfg_storeinnvm_valid.data, _x.radarcfg_sortindex_valid.data, _x.radarcfg_sendextinfo_valid.data, _x.radarcfg_sendquality_valid.data, _x.radarcfg_outputtype_valid.data, _x.radarcfg_radarpower_valid.data, _x.radarcfg_sensorid_valid.data, _x.radarcfg_maxdistance_valid.data, _x.radarcfg_maxdistance.data, _x.radarcfg_radarpower.data, _x.radarcfg_outputtype.data, _x.radarcfg_sensorid.data, _x.radarcfg_storeinnvm.data, _x.radarcfg_sortindex.data, _x.radarcfg_sendextinfo.data, _x.radarcfg_sendquality.data, _x.radarcfg_ctrlrelay.data, _x.radarcfg_ctrlrelay_valid.data, _x.radarcfg_rcs_threshold.data, _x.radarcfg_rcs_threshold_valid.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radarcfg_storeinnvm_valid is None:
        self.radarcfg_storeinnvm_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sortindex_valid is None:
        self.radarcfg_sortindex_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sendextinfo_valid is None:
        self.radarcfg_sendextinfo_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sendquality_valid is None:
        self.radarcfg_sendquality_valid = std_msgs.msg.UInt8()
      if self.radarcfg_outputtype_valid is None:
        self.radarcfg_outputtype_valid = std_msgs.msg.UInt8()
      if self.radarcfg_radarpower_valid is None:
        self.radarcfg_radarpower_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sensorid_valid is None:
        self.radarcfg_sensorid_valid = std_msgs.msg.UInt8()
      if self.radarcfg_maxdistance_valid is None:
        self.radarcfg_maxdistance_valid = std_msgs.msg.UInt8()
      if self.radarcfg_maxdistance is None:
        self.radarcfg_maxdistance = std_msgs.msg.UInt8()
      if self.radarcfg_radarpower is None:
        self.radarcfg_radarpower = std_msgs.msg.UInt8()
      if self.radarcfg_outputtype is None:
        self.radarcfg_outputtype = std_msgs.msg.UInt8()
      if self.radarcfg_sensorid is None:
        self.radarcfg_sensorid = std_msgs.msg.UInt8()
      if self.radarcfg_storeinnvm is None:
        self.radarcfg_storeinnvm = std_msgs.msg.UInt8()
      if self.radarcfg_sortindex is None:
        self.radarcfg_sortindex = std_msgs.msg.UInt8()
      if self.radarcfg_sendextinfo is None:
        self.radarcfg_sendextinfo = std_msgs.msg.UInt8()
      if self.radarcfg_sendquality is None:
        self.radarcfg_sendquality = std_msgs.msg.UInt8()
      if self.radarcfg_ctrlrelay is None:
        self.radarcfg_ctrlrelay = std_msgs.msg.UInt8()
      if self.radarcfg_ctrlrelay_valid is None:
        self.radarcfg_ctrlrelay_valid = std_msgs.msg.UInt8()
      if self.radarcfg_rcs_threshold is None:
        self.radarcfg_rcs_threshold = std_msgs.msg.UInt8()
      if self.radarcfg_rcs_threshold_valid is None:
        self.radarcfg_rcs_threshold_valid = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.radarcfg_storeinnvm_valid.data, _x.radarcfg_sortindex_valid.data, _x.radarcfg_sendextinfo_valid.data, _x.radarcfg_sendquality_valid.data, _x.radarcfg_outputtype_valid.data, _x.radarcfg_radarpower_valid.data, _x.radarcfg_sensorid_valid.data, _x.radarcfg_maxdistance_valid.data, _x.radarcfg_maxdistance.data, _x.radarcfg_radarpower.data, _x.radarcfg_outputtype.data, _x.radarcfg_sensorid.data, _x.radarcfg_storeinnvm.data, _x.radarcfg_sortindex.data, _x.radarcfg_sendextinfo.data, _x.radarcfg_sendquality.data, _x.radarcfg_ctrlrelay.data, _x.radarcfg_ctrlrelay_valid.data, _x.radarcfg_rcs_threshold.data, _x.radarcfg_rcs_threshold_valid.data,) = _get_struct_20B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_20B().pack(_x.radarcfg_storeinnvm_valid.data, _x.radarcfg_sortindex_valid.data, _x.radarcfg_sendextinfo_valid.data, _x.radarcfg_sendquality_valid.data, _x.radarcfg_outputtype_valid.data, _x.radarcfg_radarpower_valid.data, _x.radarcfg_sensorid_valid.data, _x.radarcfg_maxdistance_valid.data, _x.radarcfg_maxdistance.data, _x.radarcfg_radarpower.data, _x.radarcfg_outputtype.data, _x.radarcfg_sensorid.data, _x.radarcfg_storeinnvm.data, _x.radarcfg_sortindex.data, _x.radarcfg_sendextinfo.data, _x.radarcfg_sendquality.data, _x.radarcfg_ctrlrelay.data, _x.radarcfg_ctrlrelay_valid.data, _x.radarcfg_rcs_threshold.data, _x.radarcfg_rcs_threshold_valid.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radarcfg_storeinnvm_valid is None:
        self.radarcfg_storeinnvm_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sortindex_valid is None:
        self.radarcfg_sortindex_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sendextinfo_valid is None:
        self.radarcfg_sendextinfo_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sendquality_valid is None:
        self.radarcfg_sendquality_valid = std_msgs.msg.UInt8()
      if self.radarcfg_outputtype_valid is None:
        self.radarcfg_outputtype_valid = std_msgs.msg.UInt8()
      if self.radarcfg_radarpower_valid is None:
        self.radarcfg_radarpower_valid = std_msgs.msg.UInt8()
      if self.radarcfg_sensorid_valid is None:
        self.radarcfg_sensorid_valid = std_msgs.msg.UInt8()
      if self.radarcfg_maxdistance_valid is None:
        self.radarcfg_maxdistance_valid = std_msgs.msg.UInt8()
      if self.radarcfg_maxdistance is None:
        self.radarcfg_maxdistance = std_msgs.msg.UInt8()
      if self.radarcfg_radarpower is None:
        self.radarcfg_radarpower = std_msgs.msg.UInt8()
      if self.radarcfg_outputtype is None:
        self.radarcfg_outputtype = std_msgs.msg.UInt8()
      if self.radarcfg_sensorid is None:
        self.radarcfg_sensorid = std_msgs.msg.UInt8()
      if self.radarcfg_storeinnvm is None:
        self.radarcfg_storeinnvm = std_msgs.msg.UInt8()
      if self.radarcfg_sortindex is None:
        self.radarcfg_sortindex = std_msgs.msg.UInt8()
      if self.radarcfg_sendextinfo is None:
        self.radarcfg_sendextinfo = std_msgs.msg.UInt8()
      if self.radarcfg_sendquality is None:
        self.radarcfg_sendquality = std_msgs.msg.UInt8()
      if self.radarcfg_ctrlrelay is None:
        self.radarcfg_ctrlrelay = std_msgs.msg.UInt8()
      if self.radarcfg_ctrlrelay_valid is None:
        self.radarcfg_ctrlrelay_valid = std_msgs.msg.UInt8()
      if self.radarcfg_rcs_threshold is None:
        self.radarcfg_rcs_threshold = std_msgs.msg.UInt8()
      if self.radarcfg_rcs_threshold_valid is None:
        self.radarcfg_rcs_threshold_valid = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.radarcfg_storeinnvm_valid.data, _x.radarcfg_sortindex_valid.data, _x.radarcfg_sendextinfo_valid.data, _x.radarcfg_sendquality_valid.data, _x.radarcfg_outputtype_valid.data, _x.radarcfg_radarpower_valid.data, _x.radarcfg_sensorid_valid.data, _x.radarcfg_maxdistance_valid.data, _x.radarcfg_maxdistance.data, _x.radarcfg_radarpower.data, _x.radarcfg_outputtype.data, _x.radarcfg_sensorid.data, _x.radarcfg_storeinnvm.data, _x.radarcfg_sortindex.data, _x.radarcfg_sendextinfo.data, _x.radarcfg_sendquality.data, _x.radarcfg_ctrlrelay.data, _x.radarcfg_ctrlrelay_valid.data, _x.radarcfg_rcs_threshold.data, _x.radarcfg_rcs_threshold_valid.data,) = _get_struct_20B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20B = None
def _get_struct_20B():
    global _struct_20B
    if _struct_20B is None:
        _struct_20B = struct.Struct("<20B")
    return _struct_20B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
