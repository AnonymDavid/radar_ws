# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/ClusterQuality.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ClusterQuality(genpy.Message):
  _md5sum = "e02012645da0efa0adaf8bcdc5630918"
  _type = "radar_conti/ClusterQuality"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  ------------------------------------------------------------------------
#
#  Name:       Cluster_2_Quality
#  Id:         0x702
#  Length:     5 bytes
#  Cycle time: 0 ms
#  Senders:    ARS_ISF
#  Layout:
#
#                          Bit
#
#             7   6   5   4   3   2   1   0
#           +---+---+---+---+---+---+---+---+
#         0 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Cluster_ID
#           +---+---+---+---+---+---+---+---+
#         1 |<-----------------x|<----------|
#           +---+---+---+---+---+---+---+---+
#                             +-- Cluster_DistLong_rms
#           +---+---+---+---+---+---+---+---+
#     B   2 |------x|<-----------------x|<--|
#     y     +---+---+---+---+---+---+---+---+
#     t           |                   +-- Cluster_VrelLong_rms
#     e           +-- Cluster_DistLat_rms
#           +---+---+---+---+---+---+---+---+
#         3 |--------------x|   |<---------x|
#           +---+---+---+---+---+---+---+---+
#                         |               +-- Cluster_PdH0
#                         +-- Cluster_VrelLat_rms
#           +---+---+---+---+---+---+---+---+
#         4 |<-----------------x|<---------x|
#           +---+---+---+---+---+---+---+---+
#                             |           +-- Cluster_AmbigState
#                             +-- Cluster_InvalidState
#
#  Signal tree:
#
#    -- {root}
#       +-- Cluster_ID
#       +-- Cluster_DistLong_rms
#       +-- Cluster_DistLat_rms
#       +-- Cluster_VrelLong_rms
#       +-- Cluster_VrelLat_rms
#       +-- Cluster_PdH0
#       +-- Cluster_InvalidState
#       +-- Cluster_AmbigState
#
#  ------------------------------------------------------------------------
#
std_msgs/Float64 cluster_distlong_rms
std_msgs/Float64 cluster_distlat_rms
std_msgs/Float64 cluster_vrellong_rms
std_msgs/Float64 cluster_vrellat_rms
std_msgs/String cluster_pdh0
std_msgs/String cluster_invalidstate
std_msgs/String cluster_ambigstate
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['cluster_distlong_rms','cluster_distlat_rms','cluster_vrellong_rms','cluster_vrellat_rms','cluster_pdh0','cluster_invalidstate','cluster_ambigstate']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/String','std_msgs/String','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cluster_distlong_rms,cluster_distlat_rms,cluster_vrellong_rms,cluster_vrellat_rms,cluster_pdh0,cluster_invalidstate,cluster_ambigstate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClusterQuality, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cluster_distlong_rms is None:
        self.cluster_distlong_rms = std_msgs.msg.Float64()
      if self.cluster_distlat_rms is None:
        self.cluster_distlat_rms = std_msgs.msg.Float64()
      if self.cluster_vrellong_rms is None:
        self.cluster_vrellong_rms = std_msgs.msg.Float64()
      if self.cluster_vrellat_rms is None:
        self.cluster_vrellat_rms = std_msgs.msg.Float64()
      if self.cluster_pdh0 is None:
        self.cluster_pdh0 = std_msgs.msg.String()
      if self.cluster_invalidstate is None:
        self.cluster_invalidstate = std_msgs.msg.String()
      if self.cluster_ambigstate is None:
        self.cluster_ambigstate = std_msgs.msg.String()
    else:
      self.cluster_distlong_rms = std_msgs.msg.Float64()
      self.cluster_distlat_rms = std_msgs.msg.Float64()
      self.cluster_vrellong_rms = std_msgs.msg.Float64()
      self.cluster_vrellat_rms = std_msgs.msg.Float64()
      self.cluster_pdh0 = std_msgs.msg.String()
      self.cluster_invalidstate = std_msgs.msg.String()
      self.cluster_ambigstate = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.cluster_distlong_rms.data, _x.cluster_distlat_rms.data, _x.cluster_vrellong_rms.data, _x.cluster_vrellat_rms.data))
      _x = self.cluster_pdh0.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cluster_invalidstate.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cluster_ambigstate.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cluster_distlong_rms is None:
        self.cluster_distlong_rms = std_msgs.msg.Float64()
      if self.cluster_distlat_rms is None:
        self.cluster_distlat_rms = std_msgs.msg.Float64()
      if self.cluster_vrellong_rms is None:
        self.cluster_vrellong_rms = std_msgs.msg.Float64()
      if self.cluster_vrellat_rms is None:
        self.cluster_vrellat_rms = std_msgs.msg.Float64()
      if self.cluster_pdh0 is None:
        self.cluster_pdh0 = std_msgs.msg.String()
      if self.cluster_invalidstate is None:
        self.cluster_invalidstate = std_msgs.msg.String()
      if self.cluster_ambigstate is None:
        self.cluster_ambigstate = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.cluster_distlong_rms.data, _x.cluster_distlat_rms.data, _x.cluster_vrellong_rms.data, _x.cluster_vrellat_rms.data,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster_pdh0.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cluster_pdh0.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster_invalidstate.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cluster_invalidstate.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster_ambigstate.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cluster_ambigstate.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.cluster_distlong_rms.data, _x.cluster_distlat_rms.data, _x.cluster_vrellong_rms.data, _x.cluster_vrellat_rms.data))
      _x = self.cluster_pdh0.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cluster_invalidstate.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cluster_ambigstate.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cluster_distlong_rms is None:
        self.cluster_distlong_rms = std_msgs.msg.Float64()
      if self.cluster_distlat_rms is None:
        self.cluster_distlat_rms = std_msgs.msg.Float64()
      if self.cluster_vrellong_rms is None:
        self.cluster_vrellong_rms = std_msgs.msg.Float64()
      if self.cluster_vrellat_rms is None:
        self.cluster_vrellat_rms = std_msgs.msg.Float64()
      if self.cluster_pdh0 is None:
        self.cluster_pdh0 = std_msgs.msg.String()
      if self.cluster_invalidstate is None:
        self.cluster_invalidstate = std_msgs.msg.String()
      if self.cluster_ambigstate is None:
        self.cluster_ambigstate = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.cluster_distlong_rms.data, _x.cluster_distlat_rms.data, _x.cluster_vrellong_rms.data, _x.cluster_vrellat_rms.data,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster_pdh0.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cluster_pdh0.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster_invalidstate.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cluster_invalidstate.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cluster_ambigstate.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cluster_ambigstate.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
