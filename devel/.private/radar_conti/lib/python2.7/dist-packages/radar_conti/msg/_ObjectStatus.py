# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/ObjectStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ObjectStatus(genpy.Message):
  _md5sum = "9bce59d00818d64eb8f4cd2b557dee63"
  _type = "radar_conti/ObjectStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  ------------------------------------------------------------------------
#
#  Name:       Obj_0_Status
#  Id:         0x60a
#  Length:     4 bytes
#  Cycle time: 0 ms
#  Senders:    ARS_ISF
#  Layout:
#
#                          Bit
#
#             7   6   5   4   3   2   1   0
#           +---+---+---+---+---+---+---+---+
#         0 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Obj_NofObjects
#           +---+---+---+---+---+---+---+---+
#     B   1 |<------------------------------|
#     y     +---+---+---+---+---+---+---+---+
#     t   2 |------------------------------x|
#     e     +---+---+---+---+---+---+---+---+
#                                         +-- Obj_MeasCounter
#           +---+---+---+---+---+---+---+---+
#         3 |<-------------x|   |   |   |   |
#           +---+---+---+---+---+---+---+---+
#                         +-- Obj_InterfaceVersion
#
#  Signal tree:
#
#    -- {root}
#       +-- Obj_NofObjects
#       +-- Obj_MeasCounter
#       +-- Obj_InterfaceVersion
#
#  ------------------------------------------------------------------------
#
std_msgs/Int32 obj_nofobjects
std_msgs/Int32 obj_meascounter
std_msgs/Int32 obj_interfaceversion
================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['obj_nofobjects','obj_meascounter','obj_interfaceversion']
  _slot_types = ['std_msgs/Int32','std_msgs/Int32','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obj_nofobjects,obj_meascounter,obj_interfaceversion

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obj_nofobjects is None:
        self.obj_nofobjects = std_msgs.msg.Int32()
      if self.obj_meascounter is None:
        self.obj_meascounter = std_msgs.msg.Int32()
      if self.obj_interfaceversion is None:
        self.obj_interfaceversion = std_msgs.msg.Int32()
    else:
      self.obj_nofobjects = std_msgs.msg.Int32()
      self.obj_meascounter = std_msgs.msg.Int32()
      self.obj_interfaceversion = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.obj_nofobjects.data, _x.obj_meascounter.data, _x.obj_interfaceversion.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obj_nofobjects is None:
        self.obj_nofobjects = std_msgs.msg.Int32()
      if self.obj_meascounter is None:
        self.obj_meascounter = std_msgs.msg.Int32()
      if self.obj_interfaceversion is None:
        self.obj_interfaceversion = std_msgs.msg.Int32()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.obj_nofobjects.data, _x.obj_meascounter.data, _x.obj_interfaceversion.data,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.obj_nofobjects.data, _x.obj_meascounter.data, _x.obj_interfaceversion.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obj_nofobjects is None:
        self.obj_nofobjects = std_msgs.msg.Int32()
      if self.obj_meascounter is None:
        self.obj_meascounter = std_msgs.msg.Int32()
      if self.obj_interfaceversion is None:
        self.obj_interfaceversion = std_msgs.msg.Int32()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.obj_nofobjects.data, _x.obj_meascounter.data, _x.obj_interfaceversion.data,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
