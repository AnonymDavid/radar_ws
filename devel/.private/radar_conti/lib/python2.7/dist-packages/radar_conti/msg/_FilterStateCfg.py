# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/FilterStateCfg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class FilterStateCfg(genpy.Message):
  _md5sum = "f9f531568fe5dff4e54bf69af7e17849"
  _type = "radar_conti/FilterStateCfg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
std_msgs/UInt8 filtercfg_valid
std_msgs/UInt8 filtercfg_active
std_msgs/UInt8 filtercfg_index
std_msgs/UInt8 filtercfg_type
std_msgs/UInt8 filtercfg_min_nofobj
std_msgs/UInt8 filtercfg_min_distance
std_msgs/UInt8 filtercfg_min_azimuth
std_msgs/UInt8 filtercfg_min_vreloncome
std_msgs/UInt8 filtercfg_min_vreldepart
std_msgs/UInt8 filtercfg_min_rcs
std_msgs/UInt8 filtercfg_min_lifetime
std_msgs/UInt8 filtercfg_min_size
std_msgs/UInt8 filtercfg_min_probexists
std_msgs/UInt8 filtercfg_min_y
std_msgs/UInt8 filtercfg_min_x
std_msgs/UInt8 filtercfg_min_vyrightleft
std_msgs/UInt8 filtercfg_min_vxoncome
std_msgs/UInt8 filtercfg_min_vyleftright
std_msgs/UInt8 filtercfg_min_vxdepart
std_msgs/UInt8 filtercfg_min_object_class
std_msgs/UInt8 filtercfg_max_nofobj
std_msgs/UInt8 filtercfg_max_distance
std_msgs/UInt8 filtercfg_max_azimuth
std_msgs/UInt8 filtercfg_max_vreloncome
std_msgs/UInt8 filtercfg_max_vreldepart
std_msgs/UInt8 filtercfg_max_rcs
std_msgs/UInt8 filtercfg_max_lifetime
std_msgs/UInt8 filtercfg_max_size
std_msgs/UInt8 filtercfg_max_probexists
std_msgs/UInt8 filtercfg_max_y
std_msgs/UInt8 filtercfg_max_x
std_msgs/UInt8 filtercfg_max_vyrightleft
std_msgs/UInt8 filtercfg_max_vxoncome
std_msgs/UInt8 filtercfg_max_vyleftright
std_msgs/UInt8 filtercfg_max_vxdepart
std_msgs/UInt8 filtercfg_max_object_class


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/UInt8
uint8 data
"""
  __slots__ = ['header','filtercfg_valid','filtercfg_active','filtercfg_index','filtercfg_type','filtercfg_min_nofobj','filtercfg_min_distance','filtercfg_min_azimuth','filtercfg_min_vreloncome','filtercfg_min_vreldepart','filtercfg_min_rcs','filtercfg_min_lifetime','filtercfg_min_size','filtercfg_min_probexists','filtercfg_min_y','filtercfg_min_x','filtercfg_min_vyrightleft','filtercfg_min_vxoncome','filtercfg_min_vyleftright','filtercfg_min_vxdepart','filtercfg_min_object_class','filtercfg_max_nofobj','filtercfg_max_distance','filtercfg_max_azimuth','filtercfg_max_vreloncome','filtercfg_max_vreldepart','filtercfg_max_rcs','filtercfg_max_lifetime','filtercfg_max_size','filtercfg_max_probexists','filtercfg_max_y','filtercfg_max_x','filtercfg_max_vyrightleft','filtercfg_max_vxoncome','filtercfg_max_vyleftright','filtercfg_max_vxdepart','filtercfg_max_object_class']
  _slot_types = ['std_msgs/Header','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,filtercfg_valid,filtercfg_active,filtercfg_index,filtercfg_type,filtercfg_min_nofobj,filtercfg_min_distance,filtercfg_min_azimuth,filtercfg_min_vreloncome,filtercfg_min_vreldepart,filtercfg_min_rcs,filtercfg_min_lifetime,filtercfg_min_size,filtercfg_min_probexists,filtercfg_min_y,filtercfg_min_x,filtercfg_min_vyrightleft,filtercfg_min_vxoncome,filtercfg_min_vyleftright,filtercfg_min_vxdepart,filtercfg_min_object_class,filtercfg_max_nofobj,filtercfg_max_distance,filtercfg_max_azimuth,filtercfg_max_vreloncome,filtercfg_max_vreldepart,filtercfg_max_rcs,filtercfg_max_lifetime,filtercfg_max_size,filtercfg_max_probexists,filtercfg_max_y,filtercfg_max_x,filtercfg_max_vyrightleft,filtercfg_max_vxoncome,filtercfg_max_vyleftright,filtercfg_max_vxdepart,filtercfg_max_object_class

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FilterStateCfg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.filtercfg_valid is None:
        self.filtercfg_valid = std_msgs.msg.UInt8()
      if self.filtercfg_active is None:
        self.filtercfg_active = std_msgs.msg.UInt8()
      if self.filtercfg_index is None:
        self.filtercfg_index = std_msgs.msg.UInt8()
      if self.filtercfg_type is None:
        self.filtercfg_type = std_msgs.msg.UInt8()
      if self.filtercfg_min_nofobj is None:
        self.filtercfg_min_nofobj = std_msgs.msg.UInt8()
      if self.filtercfg_min_distance is None:
        self.filtercfg_min_distance = std_msgs.msg.UInt8()
      if self.filtercfg_min_azimuth is None:
        self.filtercfg_min_azimuth = std_msgs.msg.UInt8()
      if self.filtercfg_min_vreloncome is None:
        self.filtercfg_min_vreloncome = std_msgs.msg.UInt8()
      if self.filtercfg_min_vreldepart is None:
        self.filtercfg_min_vreldepart = std_msgs.msg.UInt8()
      if self.filtercfg_min_rcs is None:
        self.filtercfg_min_rcs = std_msgs.msg.UInt8()
      if self.filtercfg_min_lifetime is None:
        self.filtercfg_min_lifetime = std_msgs.msg.UInt8()
      if self.filtercfg_min_size is None:
        self.filtercfg_min_size = std_msgs.msg.UInt8()
      if self.filtercfg_min_probexists is None:
        self.filtercfg_min_probexists = std_msgs.msg.UInt8()
      if self.filtercfg_min_y is None:
        self.filtercfg_min_y = std_msgs.msg.UInt8()
      if self.filtercfg_min_x is None:
        self.filtercfg_min_x = std_msgs.msg.UInt8()
      if self.filtercfg_min_vyrightleft is None:
        self.filtercfg_min_vyrightleft = std_msgs.msg.UInt8()
      if self.filtercfg_min_vxoncome is None:
        self.filtercfg_min_vxoncome = std_msgs.msg.UInt8()
      if self.filtercfg_min_vyleftright is None:
        self.filtercfg_min_vyleftright = std_msgs.msg.UInt8()
      if self.filtercfg_min_vxdepart is None:
        self.filtercfg_min_vxdepart = std_msgs.msg.UInt8()
      if self.filtercfg_min_object_class is None:
        self.filtercfg_min_object_class = std_msgs.msg.UInt8()
      if self.filtercfg_max_nofobj is None:
        self.filtercfg_max_nofobj = std_msgs.msg.UInt8()
      if self.filtercfg_max_distance is None:
        self.filtercfg_max_distance = std_msgs.msg.UInt8()
      if self.filtercfg_max_azimuth is None:
        self.filtercfg_max_azimuth = std_msgs.msg.UInt8()
      if self.filtercfg_max_vreloncome is None:
        self.filtercfg_max_vreloncome = std_msgs.msg.UInt8()
      if self.filtercfg_max_vreldepart is None:
        self.filtercfg_max_vreldepart = std_msgs.msg.UInt8()
      if self.filtercfg_max_rcs is None:
        self.filtercfg_max_rcs = std_msgs.msg.UInt8()
      if self.filtercfg_max_lifetime is None:
        self.filtercfg_max_lifetime = std_msgs.msg.UInt8()
      if self.filtercfg_max_size is None:
        self.filtercfg_max_size = std_msgs.msg.UInt8()
      if self.filtercfg_max_probexists is None:
        self.filtercfg_max_probexists = std_msgs.msg.UInt8()
      if self.filtercfg_max_y is None:
        self.filtercfg_max_y = std_msgs.msg.UInt8()
      if self.filtercfg_max_x is None:
        self.filtercfg_max_x = std_msgs.msg.UInt8()
      if self.filtercfg_max_vyrightleft is None:
        self.filtercfg_max_vyrightleft = std_msgs.msg.UInt8()
      if self.filtercfg_max_vxoncome is None:
        self.filtercfg_max_vxoncome = std_msgs.msg.UInt8()
      if self.filtercfg_max_vyleftright is None:
        self.filtercfg_max_vyleftright = std_msgs.msg.UInt8()
      if self.filtercfg_max_vxdepart is None:
        self.filtercfg_max_vxdepart = std_msgs.msg.UInt8()
      if self.filtercfg_max_object_class is None:
        self.filtercfg_max_object_class = std_msgs.msg.UInt8()
    else:
      self.header = std_msgs.msg.Header()
      self.filtercfg_valid = std_msgs.msg.UInt8()
      self.filtercfg_active = std_msgs.msg.UInt8()
      self.filtercfg_index = std_msgs.msg.UInt8()
      self.filtercfg_type = std_msgs.msg.UInt8()
      self.filtercfg_min_nofobj = std_msgs.msg.UInt8()
      self.filtercfg_min_distance = std_msgs.msg.UInt8()
      self.filtercfg_min_azimuth = std_msgs.msg.UInt8()
      self.filtercfg_min_vreloncome = std_msgs.msg.UInt8()
      self.filtercfg_min_vreldepart = std_msgs.msg.UInt8()
      self.filtercfg_min_rcs = std_msgs.msg.UInt8()
      self.filtercfg_min_lifetime = std_msgs.msg.UInt8()
      self.filtercfg_min_size = std_msgs.msg.UInt8()
      self.filtercfg_min_probexists = std_msgs.msg.UInt8()
      self.filtercfg_min_y = std_msgs.msg.UInt8()
      self.filtercfg_min_x = std_msgs.msg.UInt8()
      self.filtercfg_min_vyrightleft = std_msgs.msg.UInt8()
      self.filtercfg_min_vxoncome = std_msgs.msg.UInt8()
      self.filtercfg_min_vyleftright = std_msgs.msg.UInt8()
      self.filtercfg_min_vxdepart = std_msgs.msg.UInt8()
      self.filtercfg_min_object_class = std_msgs.msg.UInt8()
      self.filtercfg_max_nofobj = std_msgs.msg.UInt8()
      self.filtercfg_max_distance = std_msgs.msg.UInt8()
      self.filtercfg_max_azimuth = std_msgs.msg.UInt8()
      self.filtercfg_max_vreloncome = std_msgs.msg.UInt8()
      self.filtercfg_max_vreldepart = std_msgs.msg.UInt8()
      self.filtercfg_max_rcs = std_msgs.msg.UInt8()
      self.filtercfg_max_lifetime = std_msgs.msg.UInt8()
      self.filtercfg_max_size = std_msgs.msg.UInt8()
      self.filtercfg_max_probexists = std_msgs.msg.UInt8()
      self.filtercfg_max_y = std_msgs.msg.UInt8()
      self.filtercfg_max_x = std_msgs.msg.UInt8()
      self.filtercfg_max_vyrightleft = std_msgs.msg.UInt8()
      self.filtercfg_max_vxoncome = std_msgs.msg.UInt8()
      self.filtercfg_max_vyleftright = std_msgs.msg.UInt8()
      self.filtercfg_max_vxdepart = std_msgs.msg.UInt8()
      self.filtercfg_max_object_class = std_msgs.msg.UInt8()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_36B().pack(_x.filtercfg_valid.data, _x.filtercfg_active.data, _x.filtercfg_index.data, _x.filtercfg_type.data, _x.filtercfg_min_nofobj.data, _x.filtercfg_min_distance.data, _x.filtercfg_min_azimuth.data, _x.filtercfg_min_vreloncome.data, _x.filtercfg_min_vreldepart.data, _x.filtercfg_min_rcs.data, _x.filtercfg_min_lifetime.data, _x.filtercfg_min_size.data, _x.filtercfg_min_probexists.data, _x.filtercfg_min_y.data, _x.filtercfg_min_x.data, _x.filtercfg_min_vyrightleft.data, _x.filtercfg_min_vxoncome.data, _x.filtercfg_min_vyleftright.data, _x.filtercfg_min_vxdepart.data, _x.filtercfg_min_object_class.data, _x.filtercfg_max_nofobj.data, _x.filtercfg_max_distance.data, _x.filtercfg_max_azimuth.data, _x.filtercfg_max_vreloncome.data, _x.filtercfg_max_vreldepart.data, _x.filtercfg_max_rcs.data, _x.filtercfg_max_lifetime.data, _x.filtercfg_max_size.data, _x.filtercfg_max_probexists.data, _x.filtercfg_max_y.data, _x.filtercfg_max_x.data, _x.filtercfg_max_vyrightleft.data, _x.filtercfg_max_vxoncome.data, _x.filtercfg_max_vyleftright.data, _x.filtercfg_max_vxdepart.data, _x.filtercfg_max_object_class.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.filtercfg_valid is None:
        self.filtercfg_valid = std_msgs.msg.UInt8()
      if self.filtercfg_active is None:
        self.filtercfg_active = std_msgs.msg.UInt8()
      if self.filtercfg_index is None:
        self.filtercfg_index = std_msgs.msg.UInt8()
      if self.filtercfg_type is None:
        self.filtercfg_type = std_msgs.msg.UInt8()
      if self.filtercfg_min_nofobj is None:
        self.filtercfg_min_nofobj = std_msgs.msg.UInt8()
      if self.filtercfg_min_distance is None:
        self.filtercfg_min_distance = std_msgs.msg.UInt8()
      if self.filtercfg_min_azimuth is None:
        self.filtercfg_min_azimuth = std_msgs.msg.UInt8()
      if self.filtercfg_min_vreloncome is None:
        self.filtercfg_min_vreloncome = std_msgs.msg.UInt8()
      if self.filtercfg_min_vreldepart is None:
        self.filtercfg_min_vreldepart = std_msgs.msg.UInt8()
      if self.filtercfg_min_rcs is None:
        self.filtercfg_min_rcs = std_msgs.msg.UInt8()
      if self.filtercfg_min_lifetime is None:
        self.filtercfg_min_lifetime = std_msgs.msg.UInt8()
      if self.filtercfg_min_size is None:
        self.filtercfg_min_size = std_msgs.msg.UInt8()
      if self.filtercfg_min_probexists is None:
        self.filtercfg_min_probexists = std_msgs.msg.UInt8()
      if self.filtercfg_min_y is None:
        self.filtercfg_min_y = std_msgs.msg.UInt8()
      if self.filtercfg_min_x is None:
        self.filtercfg_min_x = std_msgs.msg.UInt8()
      if self.filtercfg_min_vyrightleft is None:
        self.filtercfg_min_vyrightleft = std_msgs.msg.UInt8()
      if self.filtercfg_min_vxoncome is None:
        self.filtercfg_min_vxoncome = std_msgs.msg.UInt8()
      if self.filtercfg_min_vyleftright is None:
        self.filtercfg_min_vyleftright = std_msgs.msg.UInt8()
      if self.filtercfg_min_vxdepart is None:
        self.filtercfg_min_vxdepart = std_msgs.msg.UInt8()
      if self.filtercfg_min_object_class is None:
        self.filtercfg_min_object_class = std_msgs.msg.UInt8()
      if self.filtercfg_max_nofobj is None:
        self.filtercfg_max_nofobj = std_msgs.msg.UInt8()
      if self.filtercfg_max_distance is None:
        self.filtercfg_max_distance = std_msgs.msg.UInt8()
      if self.filtercfg_max_azimuth is None:
        self.filtercfg_max_azimuth = std_msgs.msg.UInt8()
      if self.filtercfg_max_vreloncome is None:
        self.filtercfg_max_vreloncome = std_msgs.msg.UInt8()
      if self.filtercfg_max_vreldepart is None:
        self.filtercfg_max_vreldepart = std_msgs.msg.UInt8()
      if self.filtercfg_max_rcs is None:
        self.filtercfg_max_rcs = std_msgs.msg.UInt8()
      if self.filtercfg_max_lifetime is None:
        self.filtercfg_max_lifetime = std_msgs.msg.UInt8()
      if self.filtercfg_max_size is None:
        self.filtercfg_max_size = std_msgs.msg.UInt8()
      if self.filtercfg_max_probexists is None:
        self.filtercfg_max_probexists = std_msgs.msg.UInt8()
      if self.filtercfg_max_y is None:
        self.filtercfg_max_y = std_msgs.msg.UInt8()
      if self.filtercfg_max_x is None:
        self.filtercfg_max_x = std_msgs.msg.UInt8()
      if self.filtercfg_max_vyrightleft is None:
        self.filtercfg_max_vyrightleft = std_msgs.msg.UInt8()
      if self.filtercfg_max_vxoncome is None:
        self.filtercfg_max_vxoncome = std_msgs.msg.UInt8()
      if self.filtercfg_max_vyleftright is None:
        self.filtercfg_max_vyleftright = std_msgs.msg.UInt8()
      if self.filtercfg_max_vxdepart is None:
        self.filtercfg_max_vxdepart = std_msgs.msg.UInt8()
      if self.filtercfg_max_object_class is None:
        self.filtercfg_max_object_class = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.filtercfg_valid.data, _x.filtercfg_active.data, _x.filtercfg_index.data, _x.filtercfg_type.data, _x.filtercfg_min_nofobj.data, _x.filtercfg_min_distance.data, _x.filtercfg_min_azimuth.data, _x.filtercfg_min_vreloncome.data, _x.filtercfg_min_vreldepart.data, _x.filtercfg_min_rcs.data, _x.filtercfg_min_lifetime.data, _x.filtercfg_min_size.data, _x.filtercfg_min_probexists.data, _x.filtercfg_min_y.data, _x.filtercfg_min_x.data, _x.filtercfg_min_vyrightleft.data, _x.filtercfg_min_vxoncome.data, _x.filtercfg_min_vyleftright.data, _x.filtercfg_min_vxdepart.data, _x.filtercfg_min_object_class.data, _x.filtercfg_max_nofobj.data, _x.filtercfg_max_distance.data, _x.filtercfg_max_azimuth.data, _x.filtercfg_max_vreloncome.data, _x.filtercfg_max_vreldepart.data, _x.filtercfg_max_rcs.data, _x.filtercfg_max_lifetime.data, _x.filtercfg_max_size.data, _x.filtercfg_max_probexists.data, _x.filtercfg_max_y.data, _x.filtercfg_max_x.data, _x.filtercfg_max_vyrightleft.data, _x.filtercfg_max_vxoncome.data, _x.filtercfg_max_vyleftright.data, _x.filtercfg_max_vxdepart.data, _x.filtercfg_max_object_class.data,) = _get_struct_36B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_36B().pack(_x.filtercfg_valid.data, _x.filtercfg_active.data, _x.filtercfg_index.data, _x.filtercfg_type.data, _x.filtercfg_min_nofobj.data, _x.filtercfg_min_distance.data, _x.filtercfg_min_azimuth.data, _x.filtercfg_min_vreloncome.data, _x.filtercfg_min_vreldepart.data, _x.filtercfg_min_rcs.data, _x.filtercfg_min_lifetime.data, _x.filtercfg_min_size.data, _x.filtercfg_min_probexists.data, _x.filtercfg_min_y.data, _x.filtercfg_min_x.data, _x.filtercfg_min_vyrightleft.data, _x.filtercfg_min_vxoncome.data, _x.filtercfg_min_vyleftright.data, _x.filtercfg_min_vxdepart.data, _x.filtercfg_min_object_class.data, _x.filtercfg_max_nofobj.data, _x.filtercfg_max_distance.data, _x.filtercfg_max_azimuth.data, _x.filtercfg_max_vreloncome.data, _x.filtercfg_max_vreldepart.data, _x.filtercfg_max_rcs.data, _x.filtercfg_max_lifetime.data, _x.filtercfg_max_size.data, _x.filtercfg_max_probexists.data, _x.filtercfg_max_y.data, _x.filtercfg_max_x.data, _x.filtercfg_max_vyrightleft.data, _x.filtercfg_max_vxoncome.data, _x.filtercfg_max_vyleftright.data, _x.filtercfg_max_vxdepart.data, _x.filtercfg_max_object_class.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.filtercfg_valid is None:
        self.filtercfg_valid = std_msgs.msg.UInt8()
      if self.filtercfg_active is None:
        self.filtercfg_active = std_msgs.msg.UInt8()
      if self.filtercfg_index is None:
        self.filtercfg_index = std_msgs.msg.UInt8()
      if self.filtercfg_type is None:
        self.filtercfg_type = std_msgs.msg.UInt8()
      if self.filtercfg_min_nofobj is None:
        self.filtercfg_min_nofobj = std_msgs.msg.UInt8()
      if self.filtercfg_min_distance is None:
        self.filtercfg_min_distance = std_msgs.msg.UInt8()
      if self.filtercfg_min_azimuth is None:
        self.filtercfg_min_azimuth = std_msgs.msg.UInt8()
      if self.filtercfg_min_vreloncome is None:
        self.filtercfg_min_vreloncome = std_msgs.msg.UInt8()
      if self.filtercfg_min_vreldepart is None:
        self.filtercfg_min_vreldepart = std_msgs.msg.UInt8()
      if self.filtercfg_min_rcs is None:
        self.filtercfg_min_rcs = std_msgs.msg.UInt8()
      if self.filtercfg_min_lifetime is None:
        self.filtercfg_min_lifetime = std_msgs.msg.UInt8()
      if self.filtercfg_min_size is None:
        self.filtercfg_min_size = std_msgs.msg.UInt8()
      if self.filtercfg_min_probexists is None:
        self.filtercfg_min_probexists = std_msgs.msg.UInt8()
      if self.filtercfg_min_y is None:
        self.filtercfg_min_y = std_msgs.msg.UInt8()
      if self.filtercfg_min_x is None:
        self.filtercfg_min_x = std_msgs.msg.UInt8()
      if self.filtercfg_min_vyrightleft is None:
        self.filtercfg_min_vyrightleft = std_msgs.msg.UInt8()
      if self.filtercfg_min_vxoncome is None:
        self.filtercfg_min_vxoncome = std_msgs.msg.UInt8()
      if self.filtercfg_min_vyleftright is None:
        self.filtercfg_min_vyleftright = std_msgs.msg.UInt8()
      if self.filtercfg_min_vxdepart is None:
        self.filtercfg_min_vxdepart = std_msgs.msg.UInt8()
      if self.filtercfg_min_object_class is None:
        self.filtercfg_min_object_class = std_msgs.msg.UInt8()
      if self.filtercfg_max_nofobj is None:
        self.filtercfg_max_nofobj = std_msgs.msg.UInt8()
      if self.filtercfg_max_distance is None:
        self.filtercfg_max_distance = std_msgs.msg.UInt8()
      if self.filtercfg_max_azimuth is None:
        self.filtercfg_max_azimuth = std_msgs.msg.UInt8()
      if self.filtercfg_max_vreloncome is None:
        self.filtercfg_max_vreloncome = std_msgs.msg.UInt8()
      if self.filtercfg_max_vreldepart is None:
        self.filtercfg_max_vreldepart = std_msgs.msg.UInt8()
      if self.filtercfg_max_rcs is None:
        self.filtercfg_max_rcs = std_msgs.msg.UInt8()
      if self.filtercfg_max_lifetime is None:
        self.filtercfg_max_lifetime = std_msgs.msg.UInt8()
      if self.filtercfg_max_size is None:
        self.filtercfg_max_size = std_msgs.msg.UInt8()
      if self.filtercfg_max_probexists is None:
        self.filtercfg_max_probexists = std_msgs.msg.UInt8()
      if self.filtercfg_max_y is None:
        self.filtercfg_max_y = std_msgs.msg.UInt8()
      if self.filtercfg_max_x is None:
        self.filtercfg_max_x = std_msgs.msg.UInt8()
      if self.filtercfg_max_vyrightleft is None:
        self.filtercfg_max_vyrightleft = std_msgs.msg.UInt8()
      if self.filtercfg_max_vxoncome is None:
        self.filtercfg_max_vxoncome = std_msgs.msg.UInt8()
      if self.filtercfg_max_vyleftright is None:
        self.filtercfg_max_vyleftright = std_msgs.msg.UInt8()
      if self.filtercfg_max_vxdepart is None:
        self.filtercfg_max_vxdepart = std_msgs.msg.UInt8()
      if self.filtercfg_max_object_class is None:
        self.filtercfg_max_object_class = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.filtercfg_valid.data, _x.filtercfg_active.data, _x.filtercfg_index.data, _x.filtercfg_type.data, _x.filtercfg_min_nofobj.data, _x.filtercfg_min_distance.data, _x.filtercfg_min_azimuth.data, _x.filtercfg_min_vreloncome.data, _x.filtercfg_min_vreldepart.data, _x.filtercfg_min_rcs.data, _x.filtercfg_min_lifetime.data, _x.filtercfg_min_size.data, _x.filtercfg_min_probexists.data, _x.filtercfg_min_y.data, _x.filtercfg_min_x.data, _x.filtercfg_min_vyrightleft.data, _x.filtercfg_min_vxoncome.data, _x.filtercfg_min_vyleftright.data, _x.filtercfg_min_vxdepart.data, _x.filtercfg_min_object_class.data, _x.filtercfg_max_nofobj.data, _x.filtercfg_max_distance.data, _x.filtercfg_max_azimuth.data, _x.filtercfg_max_vreloncome.data, _x.filtercfg_max_vreldepart.data, _x.filtercfg_max_rcs.data, _x.filtercfg_max_lifetime.data, _x.filtercfg_max_size.data, _x.filtercfg_max_probexists.data, _x.filtercfg_max_y.data, _x.filtercfg_max_x.data, _x.filtercfg_max_vyrightleft.data, _x.filtercfg_max_vxoncome.data, _x.filtercfg_max_vyleftright.data, _x.filtercfg_max_vxdepart.data, _x.filtercfg_max_object_class.data,) = _get_struct_36B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36B = None
def _get_struct_36B():
    global _struct_36B
    if _struct_36B is None:
        _struct_36B = struct.Struct("<36B")
    return _struct_36B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
