# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/ClusterGeneral.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ClusterGeneral(genpy.Message):
  _md5sum = "48915065ec2595ba51250ae485075a77"
  _type = "radar_conti/ClusterGeneral"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  ------------------------------------------------------------------------
#
#  Name:       Cluster_1_General
#  Id:         0x701
#  Length:     8 bytes
#  Cycle time: 0 ms
#  Senders:    ARS_ISF
#  Layout:
#
#                          Bit
#
#             7   6   5   4   3   2   1   0
#           +---+---+---+---+---+---+---+---+
#         0 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Cluster_ID
#           +---+---+---+---+---+---+---+---+
#         1 |<------------------------------|
#           +---+---+---+---+---+---+---+---+
#         2 |------------------x|   |<------|
#           +---+---+---+---+---+---+---+---+
#                             +-- Cluster_DistLong
#           +---+---+---+---+---+---+---+---+
#         3 |------------------------------x|
#     B     +---+---+---+---+---+---+---+---+
#     y                                   +-- Cluster_DistLat
#     t     +---+---+---+---+---+---+---+---+
#     e   4 |<------------------------------|
#           +---+---+---+---+---+---+---+---+
#         5 |------x|<----------------------|
#           +---+---+---+---+---+---+---+---+
#                 +-- Cluster_VrelLong
#           +---+---+---+---+---+---+---+---+
#         6 |----------x|   |   |<---------x|
#           +---+---+---+---+---+---+---+---+
#                     |                   +-- Cluster_DynProp
#                     +-- Cluster_VrelLat
#           +---+---+---+---+---+---+---+---+
#         7 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Cluster_RCS
#
#  Signal tree:
#
#    -- {root}
#       +-- Cluster_ID
#       +-- Cluster_DistLong
#       +-- Cluster_DistLat
#       +-- Cluster_VrelLong
#       +-- Cluster_VrelLat
#       +-- Cluster_DynProp
#       +-- Cluster_RCS
#
#  ------------------------------------------------------------------------
std_msgs/Float64 cluster_distlong
std_msgs/Float64 cluster_distlat
std_msgs/Float64 cluster_vrellong
std_msgs/Float64 cluster_vrellat
std_msgs/Int32   cluster_dynprop
std_msgs/Float64 cluster_rcs
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['cluster_distlong','cluster_distlat','cluster_vrellong','cluster_vrellat','cluster_dynprop','cluster_rcs']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Int32','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cluster_distlong,cluster_distlat,cluster_vrellong,cluster_vrellat,cluster_dynprop,cluster_rcs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClusterGeneral, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cluster_distlong is None:
        self.cluster_distlong = std_msgs.msg.Float64()
      if self.cluster_distlat is None:
        self.cluster_distlat = std_msgs.msg.Float64()
      if self.cluster_vrellong is None:
        self.cluster_vrellong = std_msgs.msg.Float64()
      if self.cluster_vrellat is None:
        self.cluster_vrellat = std_msgs.msg.Float64()
      if self.cluster_dynprop is None:
        self.cluster_dynprop = std_msgs.msg.Int32()
      if self.cluster_rcs is None:
        self.cluster_rcs = std_msgs.msg.Float64()
    else:
      self.cluster_distlong = std_msgs.msg.Float64()
      self.cluster_distlat = std_msgs.msg.Float64()
      self.cluster_vrellong = std_msgs.msg.Float64()
      self.cluster_vrellat = std_msgs.msg.Float64()
      self.cluster_dynprop = std_msgs.msg.Int32()
      self.cluster_rcs = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4did().pack(_x.cluster_distlong.data, _x.cluster_distlat.data, _x.cluster_vrellong.data, _x.cluster_vrellat.data, _x.cluster_dynprop.data, _x.cluster_rcs.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cluster_distlong is None:
        self.cluster_distlong = std_msgs.msg.Float64()
      if self.cluster_distlat is None:
        self.cluster_distlat = std_msgs.msg.Float64()
      if self.cluster_vrellong is None:
        self.cluster_vrellong = std_msgs.msg.Float64()
      if self.cluster_vrellat is None:
        self.cluster_vrellat = std_msgs.msg.Float64()
      if self.cluster_dynprop is None:
        self.cluster_dynprop = std_msgs.msg.Int32()
      if self.cluster_rcs is None:
        self.cluster_rcs = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.cluster_distlong.data, _x.cluster_distlat.data, _x.cluster_vrellong.data, _x.cluster_vrellat.data, _x.cluster_dynprop.data, _x.cluster_rcs.data,) = _get_struct_4did().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4did().pack(_x.cluster_distlong.data, _x.cluster_distlat.data, _x.cluster_vrellong.data, _x.cluster_vrellat.data, _x.cluster_dynprop.data, _x.cluster_rcs.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cluster_distlong is None:
        self.cluster_distlong = std_msgs.msg.Float64()
      if self.cluster_distlat is None:
        self.cluster_distlat = std_msgs.msg.Float64()
      if self.cluster_vrellong is None:
        self.cluster_vrellong = std_msgs.msg.Float64()
      if self.cluster_vrellat is None:
        self.cluster_vrellat = std_msgs.msg.Float64()
      if self.cluster_dynprop is None:
        self.cluster_dynprop = std_msgs.msg.Int32()
      if self.cluster_rcs is None:
        self.cluster_rcs = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.cluster_distlong.data, _x.cluster_distlat.data, _x.cluster_vrellong.data, _x.cluster_vrellat.data, _x.cluster_dynprop.data, _x.cluster_rcs.data,) = _get_struct_4did().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4did = None
def _get_struct_4did():
    global _struct_4did
    if _struct_4did is None:
        _struct_4did = struct.Struct("<4did")
    return _struct_4did
