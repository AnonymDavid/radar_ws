# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/ObjectGeneral.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ObjectGeneral(genpy.Message):
  _md5sum = "7c5a688592b37e839ffa103089e32ef1"
  _type = "radar_conti/ObjectGeneral"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  ------------------------------------------------------------------------
#
#  Name:       Obj_1_General
#  Id:         0x60b
#  Length:     8 bytes
#  Cycle time: 0 ms
#  Senders:    ARS_ISF
#  Layout:
#
#                          Bit
#
#             7   6   5   4   3   2   1   0
#           +---+---+---+---+---+---+---+---+
#         0 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Obj_ID
#           +---+---+---+---+---+---+---+---+
#         1 |<------------------------------|
#           +---+---+---+---+---+---+---+---+
#         2 |------------------x|<----------|
#           +---+---+---+---+---+---+---+---+
#                             +-- Obj_DistLong
#           +---+---+---+---+---+---+---+---+
#         3 |------------------------------x|
#     B     +---+---+---+---+---+---+---+---+
#     y                                   +-- Obj_DistLat
#     t     +---+---+---+---+---+---+---+---+
#     e   4 |<------------------------------|
#           +---+---+---+---+---+---+---+---+
#         5 |------x|<----------------------|
#           +---+---+---+---+---+---+---+---+
#                 +-- Obj_VrelLong
#           +---+---+---+---+---+---+---+---+
#         6 |----------x|   |   |<---------x|
#           +---+---+---+---+---+---+---+---+
#                     |                   +-- Obj_DynProp
#                     +-- Obj_VrelLat
#           +---+---+---+---+---+---+---+---+
#         7 |<-----------------------------x|
#           +---+---+---+---+---+---+---+---+
#                                         +-- Obj_RCS
#
#  Signal tree:
#
#    -- {root}
#       +-- Obj_ID
#       +-- Obj_DistLong
#       +-- Obj_DistLat
#       +-- Obj_VrelLong
#       +-- Obj_VrelLat
#       +-- Obj_DynProp
#       +-- Obj_RCS
#
#  ------------------------------------------------------------------------
#
std_msgs/Float64 obj_distlong
std_msgs/Float64 obj_distlat
std_msgs/Float64 obj_vrellong
std_msgs/Float64 obj_vrellat
std_msgs/String obj_dynprop
std_msgs/Float64 obj_rcs
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['obj_distlong','obj_distlat','obj_vrellong','obj_vrellat','obj_dynprop','obj_rcs']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/String','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obj_distlong,obj_distlat,obj_vrellong,obj_vrellat,obj_dynprop,obj_rcs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectGeneral, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obj_distlong is None:
        self.obj_distlong = std_msgs.msg.Float64()
      if self.obj_distlat is None:
        self.obj_distlat = std_msgs.msg.Float64()
      if self.obj_vrellong is None:
        self.obj_vrellong = std_msgs.msg.Float64()
      if self.obj_vrellat is None:
        self.obj_vrellat = std_msgs.msg.Float64()
      if self.obj_dynprop is None:
        self.obj_dynprop = std_msgs.msg.String()
      if self.obj_rcs is None:
        self.obj_rcs = std_msgs.msg.Float64()
    else:
      self.obj_distlong = std_msgs.msg.Float64()
      self.obj_distlat = std_msgs.msg.Float64()
      self.obj_vrellong = std_msgs.msg.Float64()
      self.obj_vrellat = std_msgs.msg.Float64()
      self.obj_dynprop = std_msgs.msg.String()
      self.obj_rcs = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.obj_distlong.data, _x.obj_distlat.data, _x.obj_vrellong.data, _x.obj_vrellat.data))
      _x = self.obj_dynprop.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.obj_rcs.data
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obj_distlong is None:
        self.obj_distlong = std_msgs.msg.Float64()
      if self.obj_distlat is None:
        self.obj_distlat = std_msgs.msg.Float64()
      if self.obj_vrellong is None:
        self.obj_vrellong = std_msgs.msg.Float64()
      if self.obj_vrellat is None:
        self.obj_vrellat = std_msgs.msg.Float64()
      if self.obj_dynprop is None:
        self.obj_dynprop = std_msgs.msg.String()
      if self.obj_rcs is None:
        self.obj_rcs = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.obj_distlong.data, _x.obj_distlat.data, _x.obj_vrellong.data, _x.obj_vrellat.data,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obj_dynprop.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obj_dynprop.data = str[start:end]
      start = end
      end += 8
      (self.obj_rcs.data,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.obj_distlong.data, _x.obj_distlat.data, _x.obj_vrellong.data, _x.obj_vrellat.data))
      _x = self.obj_dynprop.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.obj_rcs.data
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obj_distlong is None:
        self.obj_distlong = std_msgs.msg.Float64()
      if self.obj_distlat is None:
        self.obj_distlat = std_msgs.msg.Float64()
      if self.obj_vrellong is None:
        self.obj_vrellong = std_msgs.msg.Float64()
      if self.obj_vrellat is None:
        self.obj_vrellat = std_msgs.msg.Float64()
      if self.obj_dynprop is None:
        self.obj_dynprop = std_msgs.msg.String()
      if self.obj_rcs is None:
        self.obj_rcs = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.obj_distlong.data, _x.obj_distlat.data, _x.obj_vrellong.data, _x.obj_vrellat.data,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obj_dynprop.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obj_dynprop.data = str[start:end]
      start = end
      end += 8
      (self.obj_rcs.data,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
