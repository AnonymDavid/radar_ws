# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from radar_conti/RadarState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RadarState(genpy.Message):
  _md5sum = "a2a8e3e1ff2df867bbb8f3f07e04a77f"
  _type = "radar_conti/RadarState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#  ------------------------------------------------------------------------
#
#  Name:       RadarState
#  Id:         0x201
#  Length:     8 bytes
#  Cycle time: 50 ms
#  Senders:    ARS_ISF
#  Layout:
#
#                          Bit
#
#             7   6   5   4   3   2   1   0
#           +---+---+---+---+---+---+---+---+
#         0 |<-x|<-x|   |   |   |   |   |   |
#           +---+---+---+---+---+---+---+---+
#             |   +-- RadarState_NVMReadStatus
#             +-- RadarState_NVMwriteStatus
#           +---+---+---+---+---+---+---+---+
#         1 |<------------------------------|
#           +---+---+---+---+---+---+---+---+
#         2 |------x|<-x|<-x|<-x|<-x|<-x|   |
#           +---+---+---+---+---+---+---+---+
#                 |   |   |   |   |   +-- RadarState_Voltage_Error
#                 |   |   |   |   +-- RadarState_Temporary_Error
#                 |   |   |   +-- RadarState_Temperature_Error
#                 |   |   +-- RadarState_Interference
#                 |   +-- RadarState_Persistent_Error
#                 +-- RadarState_MaxDistanceCfg
#           +---+---+---+---+---+---+---+---+
#     B   3 |   |   |   |   |   |   |<------|
#     y     +---+---+---+---+---+---+---+---+
#     t   4 |--x|<---------x|   |<---------x|
#     e     +---+---+---+---+---+---+---+---+
#             |           |               +-- RadarState_SensorID
#             |           +-- RadarState_SortIndex
#             +-- RadarState_RadarPowerCfg
#           +---+---+---+---+---+---+---+---+
#         5 |<-----x|<-x|<-x|<-----x|<-x|   |
#           +---+---+---+---+---+---+---+---+
#                 |   |   |       |   +-- RadarState_CtrlRelayCfg
#                 |   |   |       +-- RadarState_OutputTypeCfg
#                 |   |   +-- RadarState_SendQualityCfg
#                 |   +-- RadarState_SendExtInfoCfg
#                 +-- RadarState_MotionRxState
#           +---+---+---+---+---+---+---+---+
#         6 |   |   |   |   |   |   |   |   |
#           +---+---+---+---+---+---+---+---+
#         7 |   |   |   |<---------x|   |   |
#           +---+---+---+---+---+---+---+---+
#                                 +-- RadarState_RCS_Threshold
#
#  Signal tree:
#
#    -- {root}
#       +-- RadarState_NVMwriteStatus
#       +-- RadarState_NVMReadStatus
#       +-- RadarState_MaxDistanceCfg
#       +-- RadarState_Persistent_Error
#       +-- RadarState_Interference
#       +-- RadarState_Temperature_Error
#       +-- RadarState_Temporary_Error
#       +-- RadarState_Voltage_Error
#       +-- RadarState_RadarPowerCfg
#       +-- RadarState_SortIndex
#       +-- RadarState_SensorID
#       +-- RadarState_MotionRxState
#       +-- RadarState_SendExtInfoCfg
#       +-- RadarState_SendQualityCfg
#       +-- RadarState_OutputTypeCfg
#       +-- RadarState_CtrlRelayCfg
#       +-- RadarState_RCS_Threshold
#
#  ------------------------------------------------------------------------
#
std_msgs/Header header
std_msgs/UInt8 radarstate_nvmwritestatus
std_msgs/UInt8 radarstate_nvmreadstatus
std_msgs/UInt8 radarstate_maxdistancecfg
std_msgs/UInt8 radarstate_persistent_error
std_msgs/UInt8 radarstate_interference
std_msgs/UInt8 radarstate_temperature_error
std_msgs/UInt8 radarstate_temporary_error
std_msgs/UInt8 radarstate_voltage_error
std_msgs/UInt8 radarstate_radarpowercfg
std_msgs/UInt8 radarstate_sortindex
std_msgs/UInt8 radarstate_sensorid
std_msgs/UInt8 radarstate_motionrxstate
std_msgs/UInt8 radarstate_sendextinfocfg
std_msgs/UInt8 radarstate_sendqualitycfg
std_msgs/UInt8 radarstate_outputtypecfg
std_msgs/UInt8 radarstate_ctrlrelaycfg
std_msgs/UInt8 radarstate_rcs_threshold
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/UInt8
uint8 data
"""
  __slots__ = ['header','radarstate_nvmwritestatus','radarstate_nvmreadstatus','radarstate_maxdistancecfg','radarstate_persistent_error','radarstate_interference','radarstate_temperature_error','radarstate_temporary_error','radarstate_voltage_error','radarstate_radarpowercfg','radarstate_sortindex','radarstate_sensorid','radarstate_motionrxstate','radarstate_sendextinfocfg','radarstate_sendqualitycfg','radarstate_outputtypecfg','radarstate_ctrlrelaycfg','radarstate_rcs_threshold']
  _slot_types = ['std_msgs/Header','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,radarstate_nvmwritestatus,radarstate_nvmreadstatus,radarstate_maxdistancecfg,radarstate_persistent_error,radarstate_interference,radarstate_temperature_error,radarstate_temporary_error,radarstate_voltage_error,radarstate_radarpowercfg,radarstate_sortindex,radarstate_sensorid,radarstate_motionrxstate,radarstate_sendextinfocfg,radarstate_sendqualitycfg,radarstate_outputtypecfg,radarstate_ctrlrelaycfg,radarstate_rcs_threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radarstate_nvmwritestatus is None:
        self.radarstate_nvmwritestatus = std_msgs.msg.UInt8()
      if self.radarstate_nvmreadstatus is None:
        self.radarstate_nvmreadstatus = std_msgs.msg.UInt8()
      if self.radarstate_maxdistancecfg is None:
        self.radarstate_maxdistancecfg = std_msgs.msg.UInt8()
      if self.radarstate_persistent_error is None:
        self.radarstate_persistent_error = std_msgs.msg.UInt8()
      if self.radarstate_interference is None:
        self.radarstate_interference = std_msgs.msg.UInt8()
      if self.radarstate_temperature_error is None:
        self.radarstate_temperature_error = std_msgs.msg.UInt8()
      if self.radarstate_temporary_error is None:
        self.radarstate_temporary_error = std_msgs.msg.UInt8()
      if self.radarstate_voltage_error is None:
        self.radarstate_voltage_error = std_msgs.msg.UInt8()
      if self.radarstate_radarpowercfg is None:
        self.radarstate_radarpowercfg = std_msgs.msg.UInt8()
      if self.radarstate_sortindex is None:
        self.radarstate_sortindex = std_msgs.msg.UInt8()
      if self.radarstate_sensorid is None:
        self.radarstate_sensorid = std_msgs.msg.UInt8()
      if self.radarstate_motionrxstate is None:
        self.radarstate_motionrxstate = std_msgs.msg.UInt8()
      if self.radarstate_sendextinfocfg is None:
        self.radarstate_sendextinfocfg = std_msgs.msg.UInt8()
      if self.radarstate_sendqualitycfg is None:
        self.radarstate_sendqualitycfg = std_msgs.msg.UInt8()
      if self.radarstate_outputtypecfg is None:
        self.radarstate_outputtypecfg = std_msgs.msg.UInt8()
      if self.radarstate_ctrlrelaycfg is None:
        self.radarstate_ctrlrelaycfg = std_msgs.msg.UInt8()
      if self.radarstate_rcs_threshold is None:
        self.radarstate_rcs_threshold = std_msgs.msg.UInt8()
    else:
      self.header = std_msgs.msg.Header()
      self.radarstate_nvmwritestatus = std_msgs.msg.UInt8()
      self.radarstate_nvmreadstatus = std_msgs.msg.UInt8()
      self.radarstate_maxdistancecfg = std_msgs.msg.UInt8()
      self.radarstate_persistent_error = std_msgs.msg.UInt8()
      self.radarstate_interference = std_msgs.msg.UInt8()
      self.radarstate_temperature_error = std_msgs.msg.UInt8()
      self.radarstate_temporary_error = std_msgs.msg.UInt8()
      self.radarstate_voltage_error = std_msgs.msg.UInt8()
      self.radarstate_radarpowercfg = std_msgs.msg.UInt8()
      self.radarstate_sortindex = std_msgs.msg.UInt8()
      self.radarstate_sensorid = std_msgs.msg.UInt8()
      self.radarstate_motionrxstate = std_msgs.msg.UInt8()
      self.radarstate_sendextinfocfg = std_msgs.msg.UInt8()
      self.radarstate_sendqualitycfg = std_msgs.msg.UInt8()
      self.radarstate_outputtypecfg = std_msgs.msg.UInt8()
      self.radarstate_ctrlrelaycfg = std_msgs.msg.UInt8()
      self.radarstate_rcs_threshold = std_msgs.msg.UInt8()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17B().pack(_x.radarstate_nvmwritestatus.data, _x.radarstate_nvmreadstatus.data, _x.radarstate_maxdistancecfg.data, _x.radarstate_persistent_error.data, _x.radarstate_interference.data, _x.radarstate_temperature_error.data, _x.radarstate_temporary_error.data, _x.radarstate_voltage_error.data, _x.radarstate_radarpowercfg.data, _x.radarstate_sortindex.data, _x.radarstate_sensorid.data, _x.radarstate_motionrxstate.data, _x.radarstate_sendextinfocfg.data, _x.radarstate_sendqualitycfg.data, _x.radarstate_outputtypecfg.data, _x.radarstate_ctrlrelaycfg.data, _x.radarstate_rcs_threshold.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radarstate_nvmwritestatus is None:
        self.radarstate_nvmwritestatus = std_msgs.msg.UInt8()
      if self.radarstate_nvmreadstatus is None:
        self.radarstate_nvmreadstatus = std_msgs.msg.UInt8()
      if self.radarstate_maxdistancecfg is None:
        self.radarstate_maxdistancecfg = std_msgs.msg.UInt8()
      if self.radarstate_persistent_error is None:
        self.radarstate_persistent_error = std_msgs.msg.UInt8()
      if self.radarstate_interference is None:
        self.radarstate_interference = std_msgs.msg.UInt8()
      if self.radarstate_temperature_error is None:
        self.radarstate_temperature_error = std_msgs.msg.UInt8()
      if self.radarstate_temporary_error is None:
        self.radarstate_temporary_error = std_msgs.msg.UInt8()
      if self.radarstate_voltage_error is None:
        self.radarstate_voltage_error = std_msgs.msg.UInt8()
      if self.radarstate_radarpowercfg is None:
        self.radarstate_radarpowercfg = std_msgs.msg.UInt8()
      if self.radarstate_sortindex is None:
        self.radarstate_sortindex = std_msgs.msg.UInt8()
      if self.radarstate_sensorid is None:
        self.radarstate_sensorid = std_msgs.msg.UInt8()
      if self.radarstate_motionrxstate is None:
        self.radarstate_motionrxstate = std_msgs.msg.UInt8()
      if self.radarstate_sendextinfocfg is None:
        self.radarstate_sendextinfocfg = std_msgs.msg.UInt8()
      if self.radarstate_sendqualitycfg is None:
        self.radarstate_sendqualitycfg = std_msgs.msg.UInt8()
      if self.radarstate_outputtypecfg is None:
        self.radarstate_outputtypecfg = std_msgs.msg.UInt8()
      if self.radarstate_ctrlrelaycfg is None:
        self.radarstate_ctrlrelaycfg = std_msgs.msg.UInt8()
      if self.radarstate_rcs_threshold is None:
        self.radarstate_rcs_threshold = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.radarstate_nvmwritestatus.data, _x.radarstate_nvmreadstatus.data, _x.radarstate_maxdistancecfg.data, _x.radarstate_persistent_error.data, _x.radarstate_interference.data, _x.radarstate_temperature_error.data, _x.radarstate_temporary_error.data, _x.radarstate_voltage_error.data, _x.radarstate_radarpowercfg.data, _x.radarstate_sortindex.data, _x.radarstate_sensorid.data, _x.radarstate_motionrxstate.data, _x.radarstate_sendextinfocfg.data, _x.radarstate_sendqualitycfg.data, _x.radarstate_outputtypecfg.data, _x.radarstate_ctrlrelaycfg.data, _x.radarstate_rcs_threshold.data,) = _get_struct_17B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17B().pack(_x.radarstate_nvmwritestatus.data, _x.radarstate_nvmreadstatus.data, _x.radarstate_maxdistancecfg.data, _x.radarstate_persistent_error.data, _x.radarstate_interference.data, _x.radarstate_temperature_error.data, _x.radarstate_temporary_error.data, _x.radarstate_voltage_error.data, _x.radarstate_radarpowercfg.data, _x.radarstate_sortindex.data, _x.radarstate_sensorid.data, _x.radarstate_motionrxstate.data, _x.radarstate_sendextinfocfg.data, _x.radarstate_sendqualitycfg.data, _x.radarstate_outputtypecfg.data, _x.radarstate_ctrlrelaycfg.data, _x.radarstate_rcs_threshold.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radarstate_nvmwritestatus is None:
        self.radarstate_nvmwritestatus = std_msgs.msg.UInt8()
      if self.radarstate_nvmreadstatus is None:
        self.radarstate_nvmreadstatus = std_msgs.msg.UInt8()
      if self.radarstate_maxdistancecfg is None:
        self.radarstate_maxdistancecfg = std_msgs.msg.UInt8()
      if self.radarstate_persistent_error is None:
        self.radarstate_persistent_error = std_msgs.msg.UInt8()
      if self.radarstate_interference is None:
        self.radarstate_interference = std_msgs.msg.UInt8()
      if self.radarstate_temperature_error is None:
        self.radarstate_temperature_error = std_msgs.msg.UInt8()
      if self.radarstate_temporary_error is None:
        self.radarstate_temporary_error = std_msgs.msg.UInt8()
      if self.radarstate_voltage_error is None:
        self.radarstate_voltage_error = std_msgs.msg.UInt8()
      if self.radarstate_radarpowercfg is None:
        self.radarstate_radarpowercfg = std_msgs.msg.UInt8()
      if self.radarstate_sortindex is None:
        self.radarstate_sortindex = std_msgs.msg.UInt8()
      if self.radarstate_sensorid is None:
        self.radarstate_sensorid = std_msgs.msg.UInt8()
      if self.radarstate_motionrxstate is None:
        self.radarstate_motionrxstate = std_msgs.msg.UInt8()
      if self.radarstate_sendextinfocfg is None:
        self.radarstate_sendextinfocfg = std_msgs.msg.UInt8()
      if self.radarstate_sendqualitycfg is None:
        self.radarstate_sendqualitycfg = std_msgs.msg.UInt8()
      if self.radarstate_outputtypecfg is None:
        self.radarstate_outputtypecfg = std_msgs.msg.UInt8()
      if self.radarstate_ctrlrelaycfg is None:
        self.radarstate_ctrlrelaycfg = std_msgs.msg.UInt8()
      if self.radarstate_rcs_threshold is None:
        self.radarstate_rcs_threshold = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.radarstate_nvmwritestatus.data, _x.radarstate_nvmreadstatus.data, _x.radarstate_maxdistancecfg.data, _x.radarstate_persistent_error.data, _x.radarstate_interference.data, _x.radarstate_temperature_error.data, _x.radarstate_temporary_error.data, _x.radarstate_voltage_error.data, _x.radarstate_radarpowercfg.data, _x.radarstate_sortindex.data, _x.radarstate_sensorid.data, _x.radarstate_motionrxstate.data, _x.radarstate_sendextinfocfg.data, _x.radarstate_sendqualitycfg.data, _x.radarstate_outputtypecfg.data, _x.radarstate_ctrlrelaycfg.data, _x.radarstate_rcs_threshold.data,) = _get_struct_17B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17B = None
def _get_struct_17B():
    global _struct_17B
    if _struct_17B is None:
        _struct_17B = struct.Struct("<17B")
    return _struct_17B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
