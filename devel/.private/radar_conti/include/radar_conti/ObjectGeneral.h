// Generated by gencpp from file radar_conti/ObjectGeneral.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_OBJECTGENERAL_H
#define RADAR_CONTI_MESSAGE_OBJECTGENERAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>
#include <std_msgs/Float64.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct ObjectGeneral_
{
  typedef ObjectGeneral_<ContainerAllocator> Type;

  ObjectGeneral_()
    : obj_distlong()
    , obj_distlat()
    , obj_vrellong()
    , obj_vrellat()
    , obj_dynprop()
    , obj_rcs()  {
    }
  ObjectGeneral_(const ContainerAllocator& _alloc)
    : obj_distlong(_alloc)
    , obj_distlat(_alloc)
    , obj_vrellong(_alloc)
    , obj_vrellat(_alloc)
    , obj_dynprop(_alloc)
    , obj_rcs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_distlong_type;
  _obj_distlong_type obj_distlong;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_distlat_type;
  _obj_distlat_type obj_distlat;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_vrellong_type;
  _obj_vrellong_type obj_vrellong;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_vrellat_type;
  _obj_vrellat_type obj_vrellat;

   typedef  ::std_msgs::String_<ContainerAllocator>  _obj_dynprop_type;
  _obj_dynprop_type obj_dynprop;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_rcs_type;
  _obj_rcs_type obj_rcs;





  typedef boost::shared_ptr< ::radar_conti::ObjectGeneral_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::ObjectGeneral_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectGeneral_

typedef ::radar_conti::ObjectGeneral_<std::allocator<void> > ObjectGeneral;

typedef boost::shared_ptr< ::radar_conti::ObjectGeneral > ObjectGeneralPtr;
typedef boost::shared_ptr< ::radar_conti::ObjectGeneral const> ObjectGeneralConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::ObjectGeneral_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::ObjectGeneral_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::ObjectGeneral_<ContainerAllocator1> & lhs, const ::radar_conti::ObjectGeneral_<ContainerAllocator2> & rhs)
{
  return lhs.obj_distlong == rhs.obj_distlong &&
    lhs.obj_distlat == rhs.obj_distlat &&
    lhs.obj_vrellong == rhs.obj_vrellong &&
    lhs.obj_vrellat == rhs.obj_vrellat &&
    lhs.obj_dynprop == rhs.obj_dynprop &&
    lhs.obj_rcs == rhs.obj_rcs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::ObjectGeneral_<ContainerAllocator1> & lhs, const ::radar_conti::ObjectGeneral_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ObjectGeneral_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ObjectGeneral_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ObjectGeneral_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ObjectGeneral_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ObjectGeneral_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ObjectGeneral_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::ObjectGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c5a688592b37e839ffa103089e32ef1";
  }

  static const char* value(const ::radar_conti::ObjectGeneral_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c5a688592b37e83ULL;
  static const uint64_t static_value2 = 0x9ffa103089e32ef1ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::ObjectGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/ObjectGeneral";
  }

  static const char* value(const ::radar_conti::ObjectGeneral_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::ObjectGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  ------------------------------------------------------------------------\n"
"#\n"
"#  Name:       Obj_1_General\n"
"#  Id:         0x60b\n"
"#  Length:     8 bytes\n"
"#  Cycle time: 0 ms\n"
"#  Senders:    ARS_ISF\n"
"#  Layout:\n"
"#\n"
"#                          Bit\n"
"#\n"
"#             7   6   5   4   3   2   1   0\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         0 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Obj_ID\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         1 |<------------------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         2 |------------------x|<----------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                             +-- Obj_DistLong\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         3 |------------------------------x|\n"
"#     B     +---+---+---+---+---+---+---+---+\n"
"#     y                                   +-- Obj_DistLat\n"
"#     t     +---+---+---+---+---+---+---+---+\n"
"#     e   4 |<------------------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         5 |------x|<----------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                 +-- Obj_VrelLong\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         6 |----------x|   |   |<---------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                     |                   +-- Obj_DynProp\n"
"#                     +-- Obj_VrelLat\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         7 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Obj_RCS\n"
"#\n"
"#  Signal tree:\n"
"#\n"
"#    -- {root}\n"
"#       +-- Obj_ID\n"
"#       +-- Obj_DistLong\n"
"#       +-- Obj_DistLat\n"
"#       +-- Obj_VrelLong\n"
"#       +-- Obj_VrelLat\n"
"#       +-- Obj_DynProp\n"
"#       +-- Obj_RCS\n"
"#\n"
"#  ------------------------------------------------------------------------\n"
"#\n"
"std_msgs/Float64 obj_distlong\n"
"std_msgs/Float64 obj_distlat\n"
"std_msgs/Float64 obj_vrellong\n"
"std_msgs/Float64 obj_vrellat\n"
"std_msgs/String obj_dynprop\n"
"std_msgs/Float64 obj_rcs\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::radar_conti::ObjectGeneral_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::ObjectGeneral_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_distlong);
      stream.next(m.obj_distlat);
      stream.next(m.obj_vrellong);
      stream.next(m.obj_vrellat);
      stream.next(m.obj_dynprop);
      stream.next(m.obj_rcs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectGeneral_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::ObjectGeneral_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::ObjectGeneral_<ContainerAllocator>& v)
  {
    s << indent << "obj_distlong: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_distlong);
    s << indent << "obj_distlat: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_distlat);
    s << indent << "obj_vrellong: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_vrellong);
    s << indent << "obj_vrellat: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_vrellat);
    s << indent << "obj_dynprop: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_dynprop);
    s << indent << "obj_rcs: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_rcs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_OBJECTGENERAL_H
