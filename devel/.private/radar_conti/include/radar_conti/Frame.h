// Generated by gencpp from file radar_conti/Frame.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_FRAME_H
#define RADAR_CONTI_MESSAGE_FRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct Frame_
{
  typedef Frame_<ContainerAllocator> Type;

  Frame_()
    : header()
    , id(0)
    , dlc(0)
    , data()
    , err(0)
    , rtr(0)
    , eff(0)  {
      data.assign(0);
  }
  Frame_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , dlc(0)
    , data()
    , err(0)
    , rtr(0)
    , eff(0)  {
  (void)_alloc;
      data.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _id_type;
  _id_type id;

   typedef uint8_t _dlc_type;
  _dlc_type dlc;

   typedef boost::array<uint8_t, 8>  _data_type;
  _data_type data;

   typedef uint8_t _err_type;
  _err_type err;

   typedef uint8_t _rtr_type;
  _rtr_type rtr;

   typedef uint8_t _eff_type;
  _eff_type eff;





  typedef boost::shared_ptr< ::radar_conti::Frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::Frame_<ContainerAllocator> const> ConstPtr;

}; // struct Frame_

typedef ::radar_conti::Frame_<std::allocator<void> > Frame;

typedef boost::shared_ptr< ::radar_conti::Frame > FramePtr;
typedef boost::shared_ptr< ::radar_conti::Frame const> FrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::Frame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::Frame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::Frame_<ContainerAllocator1> & lhs, const ::radar_conti::Frame_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.dlc == rhs.dlc &&
    lhs.data == rhs.data &&
    lhs.err == rhs.err &&
    lhs.rtr == rhs.rtr &&
    lhs.eff == rhs.eff;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::Frame_<ContainerAllocator1> & lhs, const ::radar_conti::Frame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::Frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::Frame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::Frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::Frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::Frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::Frame_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a26d3cc4cc1900d6e3717664421f4e34";
  }

  static const char* value(const ::radar_conti::Frame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa26d3cc4cc1900d6ULL;
  static const uint64_t static_value2 = 0xe3717664421f4e34ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/Frame";
  }

  static const char* value(const ::radar_conti::Frame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint32 id\n"
"uint8 dlc\n"
"uint8[8] data\n"
"uint8 err\n"
"uint8 rtr\n"
"uint8 eff\n"
"\n"
"## @file Frame.msg\n"
"# @ingroup ros2can_bridge\n"
"# @author Philipp Wuestenberg\n"
"# @brief message type to publish can messages to ROS topic\n"
"# @param id CAN message id (11/29 bit)\n"
"# @param dlc CAN data size in bytes\n"
"# @param data CAN data\n"
"# @param err error flag bit (0 = data frame, 1 = error message)\n"
"# @param rtr remote transmission request flag (1 = rtr frame)\n"
"# @param eff frame format flag (0 = standard 11 bit, 1 = extended 29 bit)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::radar_conti::Frame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::Frame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.dlc);
      stream.next(m.data);
      stream.next(m.err);
      stream.next(m.rtr);
      stream.next(m.eff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::Frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::Frame_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "dlc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dlc);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "err: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err);
    s << indent << "rtr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rtr);
    s << indent << "eff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.eff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_FRAME_H
