// Generated by gencpp from file radar_conti/FilterCfg.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_FILTERCFG_H
#define RADAR_CONTI_MESSAGE_FILTERCFG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct FilterCfg_
{
  typedef FilterCfg_<ContainerAllocator> Type;

  FilterCfg_()
    : header()
    , filtercfg_valid()
    , filtercfg_active()
    , filtercfg_index()
    , filtercfg_type()
    , filtercfg_min_nofobj()
    , filtercfg_min_distance()
    , filtercfg_min_azimuth()
    , filtercfg_min_vreloncome()
    , filtercfg_min_vreldepart()
    , filtercfg_min_rcs()
    , filtercfg_min_lifetime()
    , filtercfg_min_size()
    , filtercfg_min_probexists()
    , filtercfg_min_y()
    , filtercfg_min_x()
    , filtercfg_min_vyrightleft()
    , filtercfg_min_vxoncome()
    , filtercfg_min_vyleftright()
    , filtercfg_min_vxdepart()
    , filtercfg_min_object_class()
    , filtercfg_max_nofobj()
    , filtercfg_max_distance()
    , filtercfg_max_azimuth()
    , filtercfg_max_vreloncome()
    , filtercfg_max_vreldepart()
    , filtercfg_max_rcs()
    , filtercfg_max_lifetime()
    , filtercfg_max_size()
    , filtercfg_max_probexists()
    , filtercfg_max_y()
    , filtercfg_max_x()
    , filtercfg_max_vyrightleft()
    , filtercfg_max_vxoncome()
    , filtercfg_max_vyleftright()
    , filtercfg_max_vxdepart()
    , filtercfg_max_object_class()  {
    }
  FilterCfg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , filtercfg_valid(_alloc)
    , filtercfg_active(_alloc)
    , filtercfg_index(_alloc)
    , filtercfg_type(_alloc)
    , filtercfg_min_nofobj(_alloc)
    , filtercfg_min_distance(_alloc)
    , filtercfg_min_azimuth(_alloc)
    , filtercfg_min_vreloncome(_alloc)
    , filtercfg_min_vreldepart(_alloc)
    , filtercfg_min_rcs(_alloc)
    , filtercfg_min_lifetime(_alloc)
    , filtercfg_min_size(_alloc)
    , filtercfg_min_probexists(_alloc)
    , filtercfg_min_y(_alloc)
    , filtercfg_min_x(_alloc)
    , filtercfg_min_vyrightleft(_alloc)
    , filtercfg_min_vxoncome(_alloc)
    , filtercfg_min_vyleftright(_alloc)
    , filtercfg_min_vxdepart(_alloc)
    , filtercfg_min_object_class(_alloc)
    , filtercfg_max_nofobj(_alloc)
    , filtercfg_max_distance(_alloc)
    , filtercfg_max_azimuth(_alloc)
    , filtercfg_max_vreloncome(_alloc)
    , filtercfg_max_vreldepart(_alloc)
    , filtercfg_max_rcs(_alloc)
    , filtercfg_max_lifetime(_alloc)
    , filtercfg_max_size(_alloc)
    , filtercfg_max_probexists(_alloc)
    , filtercfg_max_y(_alloc)
    , filtercfg_max_x(_alloc)
    , filtercfg_max_vyrightleft(_alloc)
    , filtercfg_max_vxoncome(_alloc)
    , filtercfg_max_vyleftright(_alloc)
    , filtercfg_max_vxdepart(_alloc)
    , filtercfg_max_object_class(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_valid_type;
  _filtercfg_valid_type filtercfg_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_active_type;
  _filtercfg_active_type filtercfg_active;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_index_type;
  _filtercfg_index_type filtercfg_index;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_type_type;
  _filtercfg_type_type filtercfg_type;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_nofobj_type;
  _filtercfg_min_nofobj_type filtercfg_min_nofobj;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_distance_type;
  _filtercfg_min_distance_type filtercfg_min_distance;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_azimuth_type;
  _filtercfg_min_azimuth_type filtercfg_min_azimuth;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_vreloncome_type;
  _filtercfg_min_vreloncome_type filtercfg_min_vreloncome;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_vreldepart_type;
  _filtercfg_min_vreldepart_type filtercfg_min_vreldepart;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_rcs_type;
  _filtercfg_min_rcs_type filtercfg_min_rcs;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_lifetime_type;
  _filtercfg_min_lifetime_type filtercfg_min_lifetime;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_size_type;
  _filtercfg_min_size_type filtercfg_min_size;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_probexists_type;
  _filtercfg_min_probexists_type filtercfg_min_probexists;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_y_type;
  _filtercfg_min_y_type filtercfg_min_y;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_x_type;
  _filtercfg_min_x_type filtercfg_min_x;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_vyrightleft_type;
  _filtercfg_min_vyrightleft_type filtercfg_min_vyrightleft;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_vxoncome_type;
  _filtercfg_min_vxoncome_type filtercfg_min_vxoncome;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_vyleftright_type;
  _filtercfg_min_vyleftright_type filtercfg_min_vyleftright;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_vxdepart_type;
  _filtercfg_min_vxdepart_type filtercfg_min_vxdepart;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_min_object_class_type;
  _filtercfg_min_object_class_type filtercfg_min_object_class;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_nofobj_type;
  _filtercfg_max_nofobj_type filtercfg_max_nofobj;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_distance_type;
  _filtercfg_max_distance_type filtercfg_max_distance;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_azimuth_type;
  _filtercfg_max_azimuth_type filtercfg_max_azimuth;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_vreloncome_type;
  _filtercfg_max_vreloncome_type filtercfg_max_vreloncome;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_vreldepart_type;
  _filtercfg_max_vreldepart_type filtercfg_max_vreldepart;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_rcs_type;
  _filtercfg_max_rcs_type filtercfg_max_rcs;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_lifetime_type;
  _filtercfg_max_lifetime_type filtercfg_max_lifetime;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_size_type;
  _filtercfg_max_size_type filtercfg_max_size;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_probexists_type;
  _filtercfg_max_probexists_type filtercfg_max_probexists;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_y_type;
  _filtercfg_max_y_type filtercfg_max_y;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_x_type;
  _filtercfg_max_x_type filtercfg_max_x;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_vyrightleft_type;
  _filtercfg_max_vyrightleft_type filtercfg_max_vyrightleft;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_vxoncome_type;
  _filtercfg_max_vxoncome_type filtercfg_max_vxoncome;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_vyleftright_type;
  _filtercfg_max_vyleftright_type filtercfg_max_vyleftright;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_vxdepart_type;
  _filtercfg_max_vxdepart_type filtercfg_max_vxdepart;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filtercfg_max_object_class_type;
  _filtercfg_max_object_class_type filtercfg_max_object_class;





  typedef boost::shared_ptr< ::radar_conti::FilterCfg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::FilterCfg_<ContainerAllocator> const> ConstPtr;

}; // struct FilterCfg_

typedef ::radar_conti::FilterCfg_<std::allocator<void> > FilterCfg;

typedef boost::shared_ptr< ::radar_conti::FilterCfg > FilterCfgPtr;
typedef boost::shared_ptr< ::radar_conti::FilterCfg const> FilterCfgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::FilterCfg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::FilterCfg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::FilterCfg_<ContainerAllocator1> & lhs, const ::radar_conti::FilterCfg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.filtercfg_valid == rhs.filtercfg_valid &&
    lhs.filtercfg_active == rhs.filtercfg_active &&
    lhs.filtercfg_index == rhs.filtercfg_index &&
    lhs.filtercfg_type == rhs.filtercfg_type &&
    lhs.filtercfg_min_nofobj == rhs.filtercfg_min_nofobj &&
    lhs.filtercfg_min_distance == rhs.filtercfg_min_distance &&
    lhs.filtercfg_min_azimuth == rhs.filtercfg_min_azimuth &&
    lhs.filtercfg_min_vreloncome == rhs.filtercfg_min_vreloncome &&
    lhs.filtercfg_min_vreldepart == rhs.filtercfg_min_vreldepart &&
    lhs.filtercfg_min_rcs == rhs.filtercfg_min_rcs &&
    lhs.filtercfg_min_lifetime == rhs.filtercfg_min_lifetime &&
    lhs.filtercfg_min_size == rhs.filtercfg_min_size &&
    lhs.filtercfg_min_probexists == rhs.filtercfg_min_probexists &&
    lhs.filtercfg_min_y == rhs.filtercfg_min_y &&
    lhs.filtercfg_min_x == rhs.filtercfg_min_x &&
    lhs.filtercfg_min_vyrightleft == rhs.filtercfg_min_vyrightleft &&
    lhs.filtercfg_min_vxoncome == rhs.filtercfg_min_vxoncome &&
    lhs.filtercfg_min_vyleftright == rhs.filtercfg_min_vyleftright &&
    lhs.filtercfg_min_vxdepart == rhs.filtercfg_min_vxdepart &&
    lhs.filtercfg_min_object_class == rhs.filtercfg_min_object_class &&
    lhs.filtercfg_max_nofobj == rhs.filtercfg_max_nofobj &&
    lhs.filtercfg_max_distance == rhs.filtercfg_max_distance &&
    lhs.filtercfg_max_azimuth == rhs.filtercfg_max_azimuth &&
    lhs.filtercfg_max_vreloncome == rhs.filtercfg_max_vreloncome &&
    lhs.filtercfg_max_vreldepart == rhs.filtercfg_max_vreldepart &&
    lhs.filtercfg_max_rcs == rhs.filtercfg_max_rcs &&
    lhs.filtercfg_max_lifetime == rhs.filtercfg_max_lifetime &&
    lhs.filtercfg_max_size == rhs.filtercfg_max_size &&
    lhs.filtercfg_max_probexists == rhs.filtercfg_max_probexists &&
    lhs.filtercfg_max_y == rhs.filtercfg_max_y &&
    lhs.filtercfg_max_x == rhs.filtercfg_max_x &&
    lhs.filtercfg_max_vyrightleft == rhs.filtercfg_max_vyrightleft &&
    lhs.filtercfg_max_vxoncome == rhs.filtercfg_max_vxoncome &&
    lhs.filtercfg_max_vyleftright == rhs.filtercfg_max_vyleftright &&
    lhs.filtercfg_max_vxdepart == rhs.filtercfg_max_vxdepart &&
    lhs.filtercfg_max_object_class == rhs.filtercfg_max_object_class;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::FilterCfg_<ContainerAllocator1> & lhs, const ::radar_conti::FilterCfg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::FilterCfg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::FilterCfg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::FilterCfg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::FilterCfg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::FilterCfg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::FilterCfg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::FilterCfg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9f531568fe5dff4e54bf69af7e17849";
  }

  static const char* value(const ::radar_conti::FilterCfg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9f531568fe5dff4ULL;
  static const uint64_t static_value2 = 0xe54bf69af7e17849ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::FilterCfg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/FilterCfg";
  }

  static const char* value(const ::radar_conti::FilterCfg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::FilterCfg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"std_msgs/UInt8 filtercfg_valid\n"
"std_msgs/UInt8 filtercfg_active\n"
"std_msgs/UInt8 filtercfg_index\n"
"std_msgs/UInt8 filtercfg_type\n"
"std_msgs/UInt8 filtercfg_min_nofobj\n"
"std_msgs/UInt8 filtercfg_min_distance\n"
"std_msgs/UInt8 filtercfg_min_azimuth\n"
"std_msgs/UInt8 filtercfg_min_vreloncome\n"
"std_msgs/UInt8 filtercfg_min_vreldepart\n"
"std_msgs/UInt8 filtercfg_min_rcs\n"
"std_msgs/UInt8 filtercfg_min_lifetime\n"
"std_msgs/UInt8 filtercfg_min_size\n"
"std_msgs/UInt8 filtercfg_min_probexists\n"
"std_msgs/UInt8 filtercfg_min_y\n"
"std_msgs/UInt8 filtercfg_min_x\n"
"std_msgs/UInt8 filtercfg_min_vyrightleft\n"
"std_msgs/UInt8 filtercfg_min_vxoncome\n"
"std_msgs/UInt8 filtercfg_min_vyleftright\n"
"std_msgs/UInt8 filtercfg_min_vxdepart\n"
"std_msgs/UInt8 filtercfg_min_object_class\n"
"std_msgs/UInt8 filtercfg_max_nofobj\n"
"std_msgs/UInt8 filtercfg_max_distance\n"
"std_msgs/UInt8 filtercfg_max_azimuth\n"
"std_msgs/UInt8 filtercfg_max_vreloncome\n"
"std_msgs/UInt8 filtercfg_max_vreldepart\n"
"std_msgs/UInt8 filtercfg_max_rcs\n"
"std_msgs/UInt8 filtercfg_max_lifetime\n"
"std_msgs/UInt8 filtercfg_max_size\n"
"std_msgs/UInt8 filtercfg_max_probexists\n"
"std_msgs/UInt8 filtercfg_max_y\n"
"std_msgs/UInt8 filtercfg_max_x\n"
"std_msgs/UInt8 filtercfg_max_vyrightleft\n"
"std_msgs/UInt8 filtercfg_max_vxoncome\n"
"std_msgs/UInt8 filtercfg_max_vyleftright\n"
"std_msgs/UInt8 filtercfg_max_vxdepart\n"
"std_msgs/UInt8 filtercfg_max_object_class\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
;
  }

  static const char* value(const ::radar_conti::FilterCfg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::FilterCfg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.filtercfg_valid);
      stream.next(m.filtercfg_active);
      stream.next(m.filtercfg_index);
      stream.next(m.filtercfg_type);
      stream.next(m.filtercfg_min_nofobj);
      stream.next(m.filtercfg_min_distance);
      stream.next(m.filtercfg_min_azimuth);
      stream.next(m.filtercfg_min_vreloncome);
      stream.next(m.filtercfg_min_vreldepart);
      stream.next(m.filtercfg_min_rcs);
      stream.next(m.filtercfg_min_lifetime);
      stream.next(m.filtercfg_min_size);
      stream.next(m.filtercfg_min_probexists);
      stream.next(m.filtercfg_min_y);
      stream.next(m.filtercfg_min_x);
      stream.next(m.filtercfg_min_vyrightleft);
      stream.next(m.filtercfg_min_vxoncome);
      stream.next(m.filtercfg_min_vyleftright);
      stream.next(m.filtercfg_min_vxdepart);
      stream.next(m.filtercfg_min_object_class);
      stream.next(m.filtercfg_max_nofobj);
      stream.next(m.filtercfg_max_distance);
      stream.next(m.filtercfg_max_azimuth);
      stream.next(m.filtercfg_max_vreloncome);
      stream.next(m.filtercfg_max_vreldepart);
      stream.next(m.filtercfg_max_rcs);
      stream.next(m.filtercfg_max_lifetime);
      stream.next(m.filtercfg_max_size);
      stream.next(m.filtercfg_max_probexists);
      stream.next(m.filtercfg_max_y);
      stream.next(m.filtercfg_max_x);
      stream.next(m.filtercfg_max_vyrightleft);
      stream.next(m.filtercfg_max_vxoncome);
      stream.next(m.filtercfg_max_vyleftright);
      stream.next(m.filtercfg_max_vxdepart);
      stream.next(m.filtercfg_max_object_class);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterCfg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::FilterCfg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::FilterCfg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "filtercfg_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_valid);
    s << indent << "filtercfg_active: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_active);
    s << indent << "filtercfg_index: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_index);
    s << indent << "filtercfg_type: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_type);
    s << indent << "filtercfg_min_nofobj: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_nofobj);
    s << indent << "filtercfg_min_distance: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_distance);
    s << indent << "filtercfg_min_azimuth: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_azimuth);
    s << indent << "filtercfg_min_vreloncome: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_vreloncome);
    s << indent << "filtercfg_min_vreldepart: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_vreldepart);
    s << indent << "filtercfg_min_rcs: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_rcs);
    s << indent << "filtercfg_min_lifetime: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_lifetime);
    s << indent << "filtercfg_min_size: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_size);
    s << indent << "filtercfg_min_probexists: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_probexists);
    s << indent << "filtercfg_min_y: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_y);
    s << indent << "filtercfg_min_x: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_x);
    s << indent << "filtercfg_min_vyrightleft: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_vyrightleft);
    s << indent << "filtercfg_min_vxoncome: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_vxoncome);
    s << indent << "filtercfg_min_vyleftright: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_vyleftright);
    s << indent << "filtercfg_min_vxdepart: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_vxdepart);
    s << indent << "filtercfg_min_object_class: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_min_object_class);
    s << indent << "filtercfg_max_nofobj: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_nofobj);
    s << indent << "filtercfg_max_distance: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_distance);
    s << indent << "filtercfg_max_azimuth: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_azimuth);
    s << indent << "filtercfg_max_vreloncome: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_vreloncome);
    s << indent << "filtercfg_max_vreldepart: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_vreldepart);
    s << indent << "filtercfg_max_rcs: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_rcs);
    s << indent << "filtercfg_max_lifetime: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_lifetime);
    s << indent << "filtercfg_max_size: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_size);
    s << indent << "filtercfg_max_probexists: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_probexists);
    s << indent << "filtercfg_max_y: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_y);
    s << indent << "filtercfg_max_x: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_x);
    s << indent << "filtercfg_max_vyrightleft: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_vyrightleft);
    s << indent << "filtercfg_max_vxoncome: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_vxoncome);
    s << indent << "filtercfg_max_vyleftright: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_vyleftright);
    s << indent << "filtercfg_max_vxdepart: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_vxdepart);
    s << indent << "filtercfg_max_object_class: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filtercfg_max_object_class);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_FILTERCFG_H
