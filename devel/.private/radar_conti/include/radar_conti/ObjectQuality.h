// Generated by gencpp from file radar_conti/ObjectQuality.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_OBJECTQUALITY_H
#define RADAR_CONTI_MESSAGE_OBJECTQUALITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct ObjectQuality_
{
  typedef ObjectQuality_<ContainerAllocator> Type;

  ObjectQuality_()
    : obj_distlong_rms()
    , obj_distlat_rms()
    , obj_vrellong_rms()
    , obj_vrellat_rms()
    , obj_arellong_rms()
    , obj_arellat_rms()
    , obj_orientation_rms()
    , obj_probofexist()
    , obj_measstate()  {
    }
  ObjectQuality_(const ContainerAllocator& _alloc)
    : obj_distlong_rms(_alloc)
    , obj_distlat_rms(_alloc)
    , obj_vrellong_rms(_alloc)
    , obj_vrellat_rms(_alloc)
    , obj_arellong_rms(_alloc)
    , obj_arellat_rms(_alloc)
    , obj_orientation_rms(_alloc)
    , obj_probofexist(_alloc)
    , obj_measstate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_distlong_rms_type;
  _obj_distlong_rms_type obj_distlong_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_distlat_rms_type;
  _obj_distlat_rms_type obj_distlat_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_vrellong_rms_type;
  _obj_vrellong_rms_type obj_vrellong_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_vrellat_rms_type;
  _obj_vrellat_rms_type obj_vrellat_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_arellong_rms_type;
  _obj_arellong_rms_type obj_arellong_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_arellat_rms_type;
  _obj_arellat_rms_type obj_arellat_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_orientation_rms_type;
  _obj_orientation_rms_type obj_orientation_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_probofexist_type;
  _obj_probofexist_type obj_probofexist;

   typedef  ::std_msgs::String_<ContainerAllocator>  _obj_measstate_type;
  _obj_measstate_type obj_measstate;





  typedef boost::shared_ptr< ::radar_conti::ObjectQuality_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::ObjectQuality_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectQuality_

typedef ::radar_conti::ObjectQuality_<std::allocator<void> > ObjectQuality;

typedef boost::shared_ptr< ::radar_conti::ObjectQuality > ObjectQualityPtr;
typedef boost::shared_ptr< ::radar_conti::ObjectQuality const> ObjectQualityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::ObjectQuality_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::ObjectQuality_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::ObjectQuality_<ContainerAllocator1> & lhs, const ::radar_conti::ObjectQuality_<ContainerAllocator2> & rhs)
{
  return lhs.obj_distlong_rms == rhs.obj_distlong_rms &&
    lhs.obj_distlat_rms == rhs.obj_distlat_rms &&
    lhs.obj_vrellong_rms == rhs.obj_vrellong_rms &&
    lhs.obj_vrellat_rms == rhs.obj_vrellat_rms &&
    lhs.obj_arellong_rms == rhs.obj_arellong_rms &&
    lhs.obj_arellat_rms == rhs.obj_arellat_rms &&
    lhs.obj_orientation_rms == rhs.obj_orientation_rms &&
    lhs.obj_probofexist == rhs.obj_probofexist &&
    lhs.obj_measstate == rhs.obj_measstate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::ObjectQuality_<ContainerAllocator1> & lhs, const ::radar_conti::ObjectQuality_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ObjectQuality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ObjectQuality_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ObjectQuality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ObjectQuality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ObjectQuality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ObjectQuality_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::ObjectQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d06c6b873d996c1cd9ff22fc03970e4";
  }

  static const char* value(const ::radar_conti::ObjectQuality_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d06c6b873d996c1ULL;
  static const uint64_t static_value2 = 0xcd9ff22fc03970e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::ObjectQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/ObjectQuality";
  }

  static const char* value(const ::radar_conti::ObjectQuality_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::ObjectQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  ------------------------------------------------------------------------\n"
"#\n"
"#  Name:       Obj_2_Quality\n"
"#  Id:         0x60c\n"
"#  Length:     7 bytes\n"
"#  Cycle time: 0 ms\n"
"#  Senders:    ARS_ISF\n"
"#  Layout:\n"
"#\n"
"#                          Bit\n"
"#\n"
"#             7   6   5   4   3   2   1   0\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         0 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Obj_ID\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         1 |<-----------------x|<----------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                             +-- Obj_DistLong_rms\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         2 |------x|<-----------------x|<--|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                 |                   +-- Obj_VrelLong_rms\n"
"#                 +-- Obj_DistLat_rms\n"
"#     B     +---+---+---+---+---+---+---+---+\n"
"#     y   3 |--------------x|<--------------|\n"
"#     t     +---+---+---+---+---+---+---+---+\n"
"#     e                   +-- Obj_VrelLat_rms\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         4 |--x|<-----------------x|<------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#             |                   +-- Obj_ArelLat_rms\n"
"#             +-- Obj_ArelLong_rms\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         5 |----------x|   |   |   |   |   |\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                     +-- Obj_Orientation_rms\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         6 |<---------x|<---------x|   |   |\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                     |           +-- Obj_MeasState\n"
"#                     +-- Obj_ProbOfExist\n"
"#\n"
"#  Signal tree:\n"
"#\n"
"#    -- {root}\n"
"#       +-- Obj_ID\n"
"#       +-- Obj_DistLong_rms\n"
"#       +-- Obj_DistLat_rms\n"
"#       +-- Obj_VrelLong_rms\n"
"#       +-- Obj_VrelLat_rms\n"
"#       +-- Obj_ArelLong_rms\n"
"#       +-- Obj_ArelLat_rms\n"
"#       +-- Obj_Orientation_rms\n"
"#       +-- Obj_ProbOfExist\n"
"#       +-- Obj_MeasState\n"
"#\n"
"#  ------------------------------------------------------------------------\n"
"std_msgs/Float64 obj_distlong_rms\n"
"std_msgs/Float64 obj_distlat_rms\n"
"std_msgs/Float64 obj_vrellong_rms\n"
"std_msgs/Float64 obj_vrellat_rms\n"
"std_msgs/Float64 obj_arellong_rms\n"
"std_msgs/Float64 obj_arellat_rms\n"
"std_msgs/Float64 obj_orientation_rms\n"
"std_msgs/Float64 obj_probofexist\n"
"std_msgs/String  obj_measstate\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::radar_conti::ObjectQuality_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::ObjectQuality_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_distlong_rms);
      stream.next(m.obj_distlat_rms);
      stream.next(m.obj_vrellong_rms);
      stream.next(m.obj_vrellat_rms);
      stream.next(m.obj_arellong_rms);
      stream.next(m.obj_arellat_rms);
      stream.next(m.obj_orientation_rms);
      stream.next(m.obj_probofexist);
      stream.next(m.obj_measstate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectQuality_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::ObjectQuality_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::ObjectQuality_<ContainerAllocator>& v)
  {
    s << indent << "obj_distlong_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_distlong_rms);
    s << indent << "obj_distlat_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_distlat_rms);
    s << indent << "obj_vrellong_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_vrellong_rms);
    s << indent << "obj_vrellat_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_vrellat_rms);
    s << indent << "obj_arellong_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_arellong_rms);
    s << indent << "obj_arellat_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_arellat_rms);
    s << indent << "obj_orientation_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_orientation_rms);
    s << indent << "obj_probofexist: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_probofexist);
    s << indent << "obj_measstate: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_measstate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_OBJECTQUALITY_H
