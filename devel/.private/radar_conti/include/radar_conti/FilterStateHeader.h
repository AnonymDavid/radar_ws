// Generated by gencpp from file radar_conti/FilterStateHeader.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_FILTERSTATEHEADER_H
#define RADAR_CONTI_MESSAGE_FILTERSTATEHEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct FilterStateHeader_
{
  typedef FilterStateHeader_<ContainerAllocator> Type;

  FilterStateHeader_()
    : header()
    , filterstate_nofclusterfiltercfg()
    , filterstate_nofobjectfiltercfg()  {
    }
  FilterStateHeader_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , filterstate_nofclusterfiltercfg(_alloc)
    , filterstate_nofobjectfiltercfg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filterstate_nofclusterfiltercfg_type;
  _filterstate_nofclusterfiltercfg_type filterstate_nofclusterfiltercfg;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _filterstate_nofobjectfiltercfg_type;
  _filterstate_nofobjectfiltercfg_type filterstate_nofobjectfiltercfg;





  typedef boost::shared_ptr< ::radar_conti::FilterStateHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::FilterStateHeader_<ContainerAllocator> const> ConstPtr;

}; // struct FilterStateHeader_

typedef ::radar_conti::FilterStateHeader_<std::allocator<void> > FilterStateHeader;

typedef boost::shared_ptr< ::radar_conti::FilterStateHeader > FilterStateHeaderPtr;
typedef boost::shared_ptr< ::radar_conti::FilterStateHeader const> FilterStateHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::FilterStateHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::FilterStateHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::FilterStateHeader_<ContainerAllocator1> & lhs, const ::radar_conti::FilterStateHeader_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.filterstate_nofclusterfiltercfg == rhs.filterstate_nofclusterfiltercfg &&
    lhs.filterstate_nofobjectfiltercfg == rhs.filterstate_nofobjectfiltercfg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::FilterStateHeader_<ContainerAllocator1> & lhs, const ::radar_conti::FilterStateHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::FilterStateHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::FilterStateHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::FilterStateHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::FilterStateHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::FilterStateHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::FilterStateHeader_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::FilterStateHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ae5e3ef34336e8c833a830f9ae125c8";
  }

  static const char* value(const ::radar_conti::FilterStateHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ae5e3ef34336e8cULL;
  static const uint64_t static_value2 = 0x833a830f9ae125c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::FilterStateHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/FilterStateHeader";
  }

  static const char* value(const ::radar_conti::FilterStateHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::FilterStateHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# Number of filter status messages for configured cluster filter\n"
"#\n"
"# possible values 0-6\n"
"# 0: no cluster filter is set\n"
"# 1-6: cluster filters\n"
"\n"
"std_msgs/UInt8 filterstate_nofclusterfiltercfg\n"
"\n"
"# Number of filter status messages for configured object filter\n"
"#\n"
"# possible values 0-16\n"
"# 0: no object filter is set\n"
"# 1-16: object filters\n"
"\n"
"std_msgs/UInt8 filterstate_nofobjectfiltercfg\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
;
  }

  static const char* value(const ::radar_conti::FilterStateHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::FilterStateHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.filterstate_nofclusterfiltercfg);
      stream.next(m.filterstate_nofobjectfiltercfg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterStateHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::FilterStateHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::FilterStateHeader_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "filterstate_nofclusterfiltercfg: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filterstate_nofclusterfiltercfg);
    s << indent << "filterstate_nofobjectfiltercfg: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.filterstate_nofobjectfiltercfg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_FILTERSTATEHEADER_H
