// Generated by gencpp from file radar_conti/ClusterGeneral.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_CLUSTERGENERAL_H
#define RADAR_CONTI_MESSAGE_CLUSTERGENERAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float64.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct ClusterGeneral_
{
  typedef ClusterGeneral_<ContainerAllocator> Type;

  ClusterGeneral_()
    : cluster_distlong()
    , cluster_distlat()
    , cluster_vrellong()
    , cluster_vrellat()
    , cluster_dynprop()
    , cluster_rcs()  {
    }
  ClusterGeneral_(const ContainerAllocator& _alloc)
    : cluster_distlong(_alloc)
    , cluster_distlat(_alloc)
    , cluster_vrellong(_alloc)
    , cluster_vrellat(_alloc)
    , cluster_dynprop(_alloc)
    , cluster_rcs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_distlong_type;
  _cluster_distlong_type cluster_distlong;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_distlat_type;
  _cluster_distlat_type cluster_distlat;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_vrellong_type;
  _cluster_vrellong_type cluster_vrellong;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_vrellat_type;
  _cluster_vrellat_type cluster_vrellat;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _cluster_dynprop_type;
  _cluster_dynprop_type cluster_dynprop;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_rcs_type;
  _cluster_rcs_type cluster_rcs;





  typedef boost::shared_ptr< ::radar_conti::ClusterGeneral_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::ClusterGeneral_<ContainerAllocator> const> ConstPtr;

}; // struct ClusterGeneral_

typedef ::radar_conti::ClusterGeneral_<std::allocator<void> > ClusterGeneral;

typedef boost::shared_ptr< ::radar_conti::ClusterGeneral > ClusterGeneralPtr;
typedef boost::shared_ptr< ::radar_conti::ClusterGeneral const> ClusterGeneralConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::ClusterGeneral_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::ClusterGeneral_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::ClusterGeneral_<ContainerAllocator1> & lhs, const ::radar_conti::ClusterGeneral_<ContainerAllocator2> & rhs)
{
  return lhs.cluster_distlong == rhs.cluster_distlong &&
    lhs.cluster_distlat == rhs.cluster_distlat &&
    lhs.cluster_vrellong == rhs.cluster_vrellong &&
    lhs.cluster_vrellat == rhs.cluster_vrellat &&
    lhs.cluster_dynprop == rhs.cluster_dynprop &&
    lhs.cluster_rcs == rhs.cluster_rcs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::ClusterGeneral_<ContainerAllocator1> & lhs, const ::radar_conti::ClusterGeneral_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ClusterGeneral_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ClusterGeneral_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ClusterGeneral_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ClusterGeneral_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ClusterGeneral_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ClusterGeneral_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::ClusterGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48915065ec2595ba51250ae485075a77";
  }

  static const char* value(const ::radar_conti::ClusterGeneral_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48915065ec2595baULL;
  static const uint64_t static_value2 = 0x51250ae485075a77ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::ClusterGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/ClusterGeneral";
  }

  static const char* value(const ::radar_conti::ClusterGeneral_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::ClusterGeneral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  ------------------------------------------------------------------------\n"
"#\n"
"#  Name:       Cluster_1_General\n"
"#  Id:         0x701\n"
"#  Length:     8 bytes\n"
"#  Cycle time: 0 ms\n"
"#  Senders:    ARS_ISF\n"
"#  Layout:\n"
"#\n"
"#                          Bit\n"
"#\n"
"#             7   6   5   4   3   2   1   0\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         0 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Cluster_ID\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         1 |<------------------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         2 |------------------x|   |<------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                             +-- Cluster_DistLong\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         3 |------------------------------x|\n"
"#     B     +---+---+---+---+---+---+---+---+\n"
"#     y                                   +-- Cluster_DistLat\n"
"#     t     +---+---+---+---+---+---+---+---+\n"
"#     e   4 |<------------------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         5 |------x|<----------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                 +-- Cluster_VrelLong\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         6 |----------x|   |   |<---------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                     |                   +-- Cluster_DynProp\n"
"#                     +-- Cluster_VrelLat\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         7 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Cluster_RCS\n"
"#\n"
"#  Signal tree:\n"
"#\n"
"#    -- {root}\n"
"#       +-- Cluster_ID\n"
"#       +-- Cluster_DistLong\n"
"#       +-- Cluster_DistLat\n"
"#       +-- Cluster_VrelLong\n"
"#       +-- Cluster_VrelLat\n"
"#       +-- Cluster_DynProp\n"
"#       +-- Cluster_RCS\n"
"#\n"
"#  ------------------------------------------------------------------------\n"
"std_msgs/Float64 cluster_distlong\n"
"std_msgs/Float64 cluster_distlat\n"
"std_msgs/Float64 cluster_vrellong\n"
"std_msgs/Float64 cluster_vrellat\n"
"std_msgs/Int32   cluster_dynprop\n"
"std_msgs/Float64 cluster_rcs\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::radar_conti::ClusterGeneral_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::ClusterGeneral_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cluster_distlong);
      stream.next(m.cluster_distlat);
      stream.next(m.cluster_vrellong);
      stream.next(m.cluster_vrellat);
      stream.next(m.cluster_dynprop);
      stream.next(m.cluster_rcs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClusterGeneral_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::ClusterGeneral_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::ClusterGeneral_<ContainerAllocator>& v)
  {
    s << indent << "cluster_distlong: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_distlong);
    s << indent << "cluster_distlat: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_distlat);
    s << indent << "cluster_vrellong: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_vrellong);
    s << indent << "cluster_vrellat: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_vrellat);
    s << indent << "cluster_dynprop: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_dynprop);
    s << indent << "cluster_rcs: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_rcs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_CLUSTERGENERAL_H
