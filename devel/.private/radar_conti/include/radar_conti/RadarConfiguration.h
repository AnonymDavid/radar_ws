// Generated by gencpp from file radar_conti/RadarConfiguration.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_RADARCONFIGURATION_H
#define RADAR_CONTI_MESSAGE_RADARCONFIGURATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct RadarConfiguration_
{
  typedef RadarConfiguration_<ContainerAllocator> Type;

  RadarConfiguration_()
    : header()
    , radarcfg_storeinnvm_valid()
    , radarcfg_sortindex_valid()
    , radarcfg_sendextinfo_valid()
    , radarcfg_sendquality_valid()
    , radarcfg_outputtype_valid()
    , radarcfg_radarpower_valid()
    , radarcfg_sensorid_valid()
    , radarcfg_maxdistance_valid()
    , radarcfg_maxdistance()
    , radarcfg_radarpower()
    , radarcfg_outputtype()
    , radarcfg_sensorid()
    , radarcfg_storeinnvm()
    , radarcfg_sortindex()
    , radarcfg_sendextinfo()
    , radarcfg_sendquality()
    , radarcfg_ctrlrelay()
    , radarcfg_ctrlrelay_valid()
    , radarcfg_rcs_threshold()
    , radarcfg_rcs_threshold_valid()  {
    }
  RadarConfiguration_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , radarcfg_storeinnvm_valid(_alloc)
    , radarcfg_sortindex_valid(_alloc)
    , radarcfg_sendextinfo_valid(_alloc)
    , radarcfg_sendquality_valid(_alloc)
    , radarcfg_outputtype_valid(_alloc)
    , radarcfg_radarpower_valid(_alloc)
    , radarcfg_sensorid_valid(_alloc)
    , radarcfg_maxdistance_valid(_alloc)
    , radarcfg_maxdistance(_alloc)
    , radarcfg_radarpower(_alloc)
    , radarcfg_outputtype(_alloc)
    , radarcfg_sensorid(_alloc)
    , radarcfg_storeinnvm(_alloc)
    , radarcfg_sortindex(_alloc)
    , radarcfg_sendextinfo(_alloc)
    , radarcfg_sendquality(_alloc)
    , radarcfg_ctrlrelay(_alloc)
    , radarcfg_ctrlrelay_valid(_alloc)
    , radarcfg_rcs_threshold(_alloc)
    , radarcfg_rcs_threshold_valid(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_storeinnvm_valid_type;
  _radarcfg_storeinnvm_valid_type radarcfg_storeinnvm_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_sortindex_valid_type;
  _radarcfg_sortindex_valid_type radarcfg_sortindex_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_sendextinfo_valid_type;
  _radarcfg_sendextinfo_valid_type radarcfg_sendextinfo_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_sendquality_valid_type;
  _radarcfg_sendquality_valid_type radarcfg_sendquality_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_outputtype_valid_type;
  _radarcfg_outputtype_valid_type radarcfg_outputtype_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_radarpower_valid_type;
  _radarcfg_radarpower_valid_type radarcfg_radarpower_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_sensorid_valid_type;
  _radarcfg_sensorid_valid_type radarcfg_sensorid_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_maxdistance_valid_type;
  _radarcfg_maxdistance_valid_type radarcfg_maxdistance_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_maxdistance_type;
  _radarcfg_maxdistance_type radarcfg_maxdistance;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_radarpower_type;
  _radarcfg_radarpower_type radarcfg_radarpower;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_outputtype_type;
  _radarcfg_outputtype_type radarcfg_outputtype;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_sensorid_type;
  _radarcfg_sensorid_type radarcfg_sensorid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_storeinnvm_type;
  _radarcfg_storeinnvm_type radarcfg_storeinnvm;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_sortindex_type;
  _radarcfg_sortindex_type radarcfg_sortindex;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_sendextinfo_type;
  _radarcfg_sendextinfo_type radarcfg_sendextinfo;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_sendquality_type;
  _radarcfg_sendquality_type radarcfg_sendquality;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_ctrlrelay_type;
  _radarcfg_ctrlrelay_type radarcfg_ctrlrelay;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_ctrlrelay_valid_type;
  _radarcfg_ctrlrelay_valid_type radarcfg_ctrlrelay_valid;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_rcs_threshold_type;
  _radarcfg_rcs_threshold_type radarcfg_rcs_threshold;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _radarcfg_rcs_threshold_valid_type;
  _radarcfg_rcs_threshold_valid_type radarcfg_rcs_threshold_valid;





  typedef boost::shared_ptr< ::radar_conti::RadarConfiguration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::RadarConfiguration_<ContainerAllocator> const> ConstPtr;

}; // struct RadarConfiguration_

typedef ::radar_conti::RadarConfiguration_<std::allocator<void> > RadarConfiguration;

typedef boost::shared_ptr< ::radar_conti::RadarConfiguration > RadarConfigurationPtr;
typedef boost::shared_ptr< ::radar_conti::RadarConfiguration const> RadarConfigurationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::RadarConfiguration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::RadarConfiguration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::RadarConfiguration_<ContainerAllocator1> & lhs, const ::radar_conti::RadarConfiguration_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.radarcfg_storeinnvm_valid == rhs.radarcfg_storeinnvm_valid &&
    lhs.radarcfg_sortindex_valid == rhs.radarcfg_sortindex_valid &&
    lhs.radarcfg_sendextinfo_valid == rhs.radarcfg_sendextinfo_valid &&
    lhs.radarcfg_sendquality_valid == rhs.radarcfg_sendquality_valid &&
    lhs.radarcfg_outputtype_valid == rhs.radarcfg_outputtype_valid &&
    lhs.radarcfg_radarpower_valid == rhs.radarcfg_radarpower_valid &&
    lhs.radarcfg_sensorid_valid == rhs.radarcfg_sensorid_valid &&
    lhs.radarcfg_maxdistance_valid == rhs.radarcfg_maxdistance_valid &&
    lhs.radarcfg_maxdistance == rhs.radarcfg_maxdistance &&
    lhs.radarcfg_radarpower == rhs.radarcfg_radarpower &&
    lhs.radarcfg_outputtype == rhs.radarcfg_outputtype &&
    lhs.radarcfg_sensorid == rhs.radarcfg_sensorid &&
    lhs.radarcfg_storeinnvm == rhs.radarcfg_storeinnvm &&
    lhs.radarcfg_sortindex == rhs.radarcfg_sortindex &&
    lhs.radarcfg_sendextinfo == rhs.radarcfg_sendextinfo &&
    lhs.radarcfg_sendquality == rhs.radarcfg_sendquality &&
    lhs.radarcfg_ctrlrelay == rhs.radarcfg_ctrlrelay &&
    lhs.radarcfg_ctrlrelay_valid == rhs.radarcfg_ctrlrelay_valid &&
    lhs.radarcfg_rcs_threshold == rhs.radarcfg_rcs_threshold &&
    lhs.radarcfg_rcs_threshold_valid == rhs.radarcfg_rcs_threshold_valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::RadarConfiguration_<ContainerAllocator1> & lhs, const ::radar_conti::RadarConfiguration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::RadarConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::RadarConfiguration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::RadarConfiguration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::RadarConfiguration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::RadarConfiguration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::RadarConfiguration_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::RadarConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab23258a6bff274c2b84163d46a17846";
  }

  static const char* value(const ::radar_conti::RadarConfiguration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab23258a6bff274cULL;
  static const uint64_t static_value2 = 0x2b84163d46a17846ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::RadarConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/RadarConfiguration";
  }

  static const char* value(const ::radar_conti::RadarConfiguration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::RadarConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  ------------------------------------------------------------------------\n"
"#\n"
"#  Name:       RadarConfiguration\n"
"#  Id:         0x200\n"
"#  Length:     8 bytes\n"
"#  Cycle time: 0 ms\n"
"#  Senders:    ExternalUnit\n"
"#  Layout:\n"
"#\n"
"#                          Bit\n"
"#\n"
"#             7   6   5   4   3   2   1   0\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         0 |<-x|<-x|<-x|<-x|<-x|<-x|<-x|<-x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#             |   |   |   |   |   |   |   +-- RadarCfg_MaxDistance_valid\n"
"#             |   |   |   |   |   |   +-- RadarCfg_SensorID_valid\n"
"#             |   |   |   |   |   +-- RadarCfg_RadarPower_valid\n"
"#             |   |   |   |   +-- RadarCfg_OutputType_valid\n"
"#             |   |   |   +-- RadarCfg_SendQuality_valid\n"
"#             |   |   +-- RadarCfg_SendExtInfo_valid\n"
"#             |   +-- RadarCfg_SortIndex_valid\n"
"#             +-- RadarCfg_StoreInNVM_valid\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         1 |<------------------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         2 |------x|   |   |   |   |   |   |\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                 +-- RadarCfg_MaxDistance\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         3 |   |   |   |   |   |   |   |   |\n"
"#     B     +---+---+---+---+---+---+---+---+\n"
"#     y   4 |<---------x|<-----x|<---------x|\n"
"#     t     +---+---+---+---+---+---+---+---+\n"
"#     e               |       |           +-- RadarCfg_SensorID\n"
"#                     |       +-- RadarCfg_OutputType\n"
"#                     +-- RadarCfg_RadarPower\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         5 |<-x|<---------x|<-x|<-x|<-x|<-x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#             |           |   |   |   |   +-- RadarCfg_CtrlRelay_valid\n"
"#             |           |   |   |   +-- RadarCfg_CtrlRelay\n"
"#             |           |   |   +-- RadarCfg_SendQuality\n"
"#             |           |   +-- RadarCfg_SendExtInfo\n"
"#             |           +-- RadarCfg_SortIndex\n"
"#             +-- RadarCfg_StoreInNVM\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         6 |   |   |   |   |<---------x|<-x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                     |   +-- RadarCfg_RCS_Threshold_valid\n"
"#                                     +-- RadarCfg_RCS_Threshold\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         7 |   |   |   |   |   |   |   |   |\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#\n"
"#  Signal tree:\n"
"#\n"
"#    -- {root}\n"
"#       +-- RadarCfg_StoreInNVM_valid\n"
"#       +-- RadarCfg_SortIndex_valid\n"
"#       +-- RadarCfg_SendExtInfo_valid\n"
"#       +-- RadarCfg_SendQuality_valid\n"
"#       +-- RadarCfg_OutputType_valid\n"
"#       +-- RadarCfg_RadarPower_valid\n"
"#       +-- RadarCfg_SensorID_valid\n"
"#       +-- RadarCfg_MaxDistance_valid\n"
"#       +-- RadarCfg_MaxDistance\n"
"#       +-- RadarCfg_RadarPower\n"
"#       +-- RadarCfg_OutputType\n"
"#       +-- RadarCfg_SensorID\n"
"#       +-- RadarCfg_StoreInNVM\n"
"#       +-- RadarCfg_SortIndex\n"
"#       +-- RadarCfg_SendExtInfo\n"
"#       +-- RadarCfg_SendQuality\n"
"#       +-- RadarCfg_CtrlRelay\n"
"#       +-- RadarCfg_CtrlRelay_valid\n"
"#       +-- RadarCfg_RCS_Threshold\n"
"#       +-- RadarCfg_RCS_Threshold_valid\n"
"#\n"
"#  ------------------------------------------------------------------------\n"
"#\n"
"\n"
"std_msgs/Header header\n"
"std_msgs/UInt8 radarcfg_storeinnvm_valid\n"
"std_msgs/UInt8 radarcfg_sortindex_valid\n"
"std_msgs/UInt8 radarcfg_sendextinfo_valid\n"
"std_msgs/UInt8 radarcfg_sendquality_valid\n"
"std_msgs/UInt8 radarcfg_outputtype_valid\n"
"std_msgs/UInt8 radarcfg_radarpower_valid\n"
"std_msgs/UInt8 radarcfg_sensorid_valid\n"
"std_msgs/UInt8 radarcfg_maxdistance_valid\n"
"std_msgs/UInt8 radarcfg_maxdistance\n"
"std_msgs/UInt8 radarcfg_radarpower\n"
"std_msgs/UInt8 radarcfg_outputtype\n"
"std_msgs/UInt8 radarcfg_sensorid\n"
"std_msgs/UInt8 radarcfg_storeinnvm\n"
"std_msgs/UInt8 radarcfg_sortindex\n"
"std_msgs/UInt8 radarcfg_sendextinfo\n"
"std_msgs/UInt8 radarcfg_sendquality\n"
"std_msgs/UInt8 radarcfg_ctrlrelay\n"
"std_msgs/UInt8 radarcfg_ctrlrelay_valid\n"
"std_msgs/UInt8 radarcfg_rcs_threshold\n"
"std_msgs/UInt8 radarcfg_rcs_threshold_valid\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
;
  }

  static const char* value(const ::radar_conti::RadarConfiguration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::RadarConfiguration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.radarcfg_storeinnvm_valid);
      stream.next(m.radarcfg_sortindex_valid);
      stream.next(m.radarcfg_sendextinfo_valid);
      stream.next(m.radarcfg_sendquality_valid);
      stream.next(m.radarcfg_outputtype_valid);
      stream.next(m.radarcfg_radarpower_valid);
      stream.next(m.radarcfg_sensorid_valid);
      stream.next(m.radarcfg_maxdistance_valid);
      stream.next(m.radarcfg_maxdistance);
      stream.next(m.radarcfg_radarpower);
      stream.next(m.radarcfg_outputtype);
      stream.next(m.radarcfg_sensorid);
      stream.next(m.radarcfg_storeinnvm);
      stream.next(m.radarcfg_sortindex);
      stream.next(m.radarcfg_sendextinfo);
      stream.next(m.radarcfg_sendquality);
      stream.next(m.radarcfg_ctrlrelay);
      stream.next(m.radarcfg_ctrlrelay_valid);
      stream.next(m.radarcfg_rcs_threshold);
      stream.next(m.radarcfg_rcs_threshold_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarConfiguration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::RadarConfiguration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::RadarConfiguration_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "radarcfg_storeinnvm_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_storeinnvm_valid);
    s << indent << "radarcfg_sortindex_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_sortindex_valid);
    s << indent << "radarcfg_sendextinfo_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_sendextinfo_valid);
    s << indent << "radarcfg_sendquality_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_sendquality_valid);
    s << indent << "radarcfg_outputtype_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_outputtype_valid);
    s << indent << "radarcfg_radarpower_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_radarpower_valid);
    s << indent << "radarcfg_sensorid_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_sensorid_valid);
    s << indent << "radarcfg_maxdistance_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_maxdistance_valid);
    s << indent << "radarcfg_maxdistance: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_maxdistance);
    s << indent << "radarcfg_radarpower: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_radarpower);
    s << indent << "radarcfg_outputtype: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_outputtype);
    s << indent << "radarcfg_sensorid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_sensorid);
    s << indent << "radarcfg_storeinnvm: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_storeinnvm);
    s << indent << "radarcfg_sortindex: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_sortindex);
    s << indent << "radarcfg_sendextinfo: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_sendextinfo);
    s << indent << "radarcfg_sendquality: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_sendquality);
    s << indent << "radarcfg_ctrlrelay: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_ctrlrelay);
    s << indent << "radarcfg_ctrlrelay_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_ctrlrelay_valid);
    s << indent << "radarcfg_rcs_threshold: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_rcs_threshold);
    s << indent << "radarcfg_rcs_threshold_valid: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.radarcfg_rcs_threshold_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_RADARCONFIGURATION_H
