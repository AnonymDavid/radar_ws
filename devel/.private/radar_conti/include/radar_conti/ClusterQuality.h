// Generated by gencpp from file radar_conti/ClusterQuality.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_CLUSTERQUALITY_H
#define RADAR_CONTI_MESSAGE_CLUSTERQUALITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct ClusterQuality_
{
  typedef ClusterQuality_<ContainerAllocator> Type;

  ClusterQuality_()
    : cluster_distlong_rms()
    , cluster_distlat_rms()
    , cluster_vrellong_rms()
    , cluster_vrellat_rms()
    , cluster_pdh0()
    , cluster_invalidstate()
    , cluster_ambigstate()  {
    }
  ClusterQuality_(const ContainerAllocator& _alloc)
    : cluster_distlong_rms(_alloc)
    , cluster_distlat_rms(_alloc)
    , cluster_vrellong_rms(_alloc)
    , cluster_vrellat_rms(_alloc)
    , cluster_pdh0(_alloc)
    , cluster_invalidstate(_alloc)
    , cluster_ambigstate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_distlong_rms_type;
  _cluster_distlong_rms_type cluster_distlong_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_distlat_rms_type;
  _cluster_distlat_rms_type cluster_distlat_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_vrellong_rms_type;
  _cluster_vrellong_rms_type cluster_vrellong_rms;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cluster_vrellat_rms_type;
  _cluster_vrellat_rms_type cluster_vrellat_rms;

   typedef  ::std_msgs::String_<ContainerAllocator>  _cluster_pdh0_type;
  _cluster_pdh0_type cluster_pdh0;

   typedef  ::std_msgs::String_<ContainerAllocator>  _cluster_invalidstate_type;
  _cluster_invalidstate_type cluster_invalidstate;

   typedef  ::std_msgs::String_<ContainerAllocator>  _cluster_ambigstate_type;
  _cluster_ambigstate_type cluster_ambigstate;





  typedef boost::shared_ptr< ::radar_conti::ClusterQuality_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::ClusterQuality_<ContainerAllocator> const> ConstPtr;

}; // struct ClusterQuality_

typedef ::radar_conti::ClusterQuality_<std::allocator<void> > ClusterQuality;

typedef boost::shared_ptr< ::radar_conti::ClusterQuality > ClusterQualityPtr;
typedef boost::shared_ptr< ::radar_conti::ClusterQuality const> ClusterQualityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::ClusterQuality_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::ClusterQuality_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::ClusterQuality_<ContainerAllocator1> & lhs, const ::radar_conti::ClusterQuality_<ContainerAllocator2> & rhs)
{
  return lhs.cluster_distlong_rms == rhs.cluster_distlong_rms &&
    lhs.cluster_distlat_rms == rhs.cluster_distlat_rms &&
    lhs.cluster_vrellong_rms == rhs.cluster_vrellong_rms &&
    lhs.cluster_vrellat_rms == rhs.cluster_vrellat_rms &&
    lhs.cluster_pdh0 == rhs.cluster_pdh0 &&
    lhs.cluster_invalidstate == rhs.cluster_invalidstate &&
    lhs.cluster_ambigstate == rhs.cluster_ambigstate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::ClusterQuality_<ContainerAllocator1> & lhs, const ::radar_conti::ClusterQuality_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ClusterQuality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ClusterQuality_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ClusterQuality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ClusterQuality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ClusterQuality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ClusterQuality_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::ClusterQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e02012645da0efa0adaf8bcdc5630918";
  }

  static const char* value(const ::radar_conti::ClusterQuality_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe02012645da0efa0ULL;
  static const uint64_t static_value2 = 0xadaf8bcdc5630918ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::ClusterQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/ClusterQuality";
  }

  static const char* value(const ::radar_conti::ClusterQuality_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::ClusterQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  ------------------------------------------------------------------------\n"
"#\n"
"#  Name:       Cluster_2_Quality\n"
"#  Id:         0x702\n"
"#  Length:     5 bytes\n"
"#  Cycle time: 0 ms\n"
"#  Senders:    ARS_ISF\n"
"#  Layout:\n"
"#\n"
"#                          Bit\n"
"#\n"
"#             7   6   5   4   3   2   1   0\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         0 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Cluster_ID\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         1 |<-----------------x|<----------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                             +-- Cluster_DistLong_rms\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#     B   2 |------x|<-----------------x|<--|\n"
"#     y     +---+---+---+---+---+---+---+---+\n"
"#     t           |                   +-- Cluster_VrelLong_rms\n"
"#     e           +-- Cluster_DistLat_rms\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         3 |--------------x|   |<---------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                         |               +-- Cluster_PdH0\n"
"#                         +-- Cluster_VrelLat_rms\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         4 |<-----------------x|<---------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                             |           +-- Cluster_AmbigState\n"
"#                             +-- Cluster_InvalidState\n"
"#\n"
"#  Signal tree:\n"
"#\n"
"#    -- {root}\n"
"#       +-- Cluster_ID\n"
"#       +-- Cluster_DistLong_rms\n"
"#       +-- Cluster_DistLat_rms\n"
"#       +-- Cluster_VrelLong_rms\n"
"#       +-- Cluster_VrelLat_rms\n"
"#       +-- Cluster_PdH0\n"
"#       +-- Cluster_InvalidState\n"
"#       +-- Cluster_AmbigState\n"
"#\n"
"#  ------------------------------------------------------------------------\n"
"#\n"
"std_msgs/Float64 cluster_distlong_rms\n"
"std_msgs/Float64 cluster_distlat_rms\n"
"std_msgs/Float64 cluster_vrellong_rms\n"
"std_msgs/Float64 cluster_vrellat_rms\n"
"std_msgs/String cluster_pdh0\n"
"std_msgs/String cluster_invalidstate\n"
"std_msgs/String cluster_ambigstate\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::radar_conti::ClusterQuality_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::ClusterQuality_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cluster_distlong_rms);
      stream.next(m.cluster_distlat_rms);
      stream.next(m.cluster_vrellong_rms);
      stream.next(m.cluster_vrellat_rms);
      stream.next(m.cluster_pdh0);
      stream.next(m.cluster_invalidstate);
      stream.next(m.cluster_ambigstate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClusterQuality_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::ClusterQuality_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::ClusterQuality_<ContainerAllocator>& v)
  {
    s << indent << "cluster_distlong_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_distlong_rms);
    s << indent << "cluster_distlat_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_distlat_rms);
    s << indent << "cluster_vrellong_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_vrellong_rms);
    s << indent << "cluster_vrellat_rms: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_vrellat_rms);
    s << indent << "cluster_pdh0: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_pdh0);
    s << indent << "cluster_invalidstate: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_invalidstate);
    s << indent << "cluster_ambigstate: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.cluster_ambigstate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_CLUSTERQUALITY_H
