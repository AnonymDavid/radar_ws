// Generated by gencpp from file radar_conti/CollisonList.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_COLLISONLIST_H
#define RADAR_CONTI_MESSAGE_COLLISONLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <radar_conti/CollisonObj.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct CollisonList_
{
  typedef CollisonList_<ContainerAllocator> Type;

  CollisonList_()
    : objects()  {
    }
  CollisonList_(const ContainerAllocator& _alloc)
    : objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::radar_conti::CollisonObj_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::radar_conti::CollisonObj_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::radar_conti::CollisonList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::CollisonList_<ContainerAllocator> const> ConstPtr;

}; // struct CollisonList_

typedef ::radar_conti::CollisonList_<std::allocator<void> > CollisonList;

typedef boost::shared_ptr< ::radar_conti::CollisonList > CollisonListPtr;
typedef boost::shared_ptr< ::radar_conti::CollisonList const> CollisonListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::CollisonList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::CollisonList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::CollisonList_<ContainerAllocator1> & lhs, const ::radar_conti::CollisonList_<ContainerAllocator2> & rhs)
{
  return lhs.objects == rhs.objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::CollisonList_<ContainerAllocator1> & lhs, const ::radar_conti::CollisonList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::CollisonList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::CollisonList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::CollisonList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::CollisonList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::CollisonList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::CollisonList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::CollisonList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a623832a153d5fa4295538827da3d97";
  }

  static const char* value(const ::radar_conti::CollisonList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a623832a153d5faULL;
  static const uint64_t static_value2 = 0x4295538827da3d97ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::CollisonList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/CollisonList";
  }

  static const char* value(const ::radar_conti::CollisonList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::CollisonList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CollisonObj[] objects\n"
"================================================================================\n"
"MSG: radar_conti/CollisonObj\n"
"std_msgs/Int32 obj_id\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::radar_conti::CollisonList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::CollisonList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CollisonList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::CollisonList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::CollisonList_<ContainerAllocator>& v)
  {
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::radar_conti::CollisonObj_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_COLLISONLIST_H
