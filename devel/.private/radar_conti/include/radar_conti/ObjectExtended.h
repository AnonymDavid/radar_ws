// Generated by gencpp from file radar_conti/ObjectExtended.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_OBJECTEXTENDED_H
#define RADAR_CONTI_MESSAGE_OBJECTEXTENDED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct ObjectExtended_
{
  typedef ObjectExtended_<ContainerAllocator> Type;

  ObjectExtended_()
    : obj_arellong()
    , obj_arellat()
    , obj_class()
    , obj_orientationangle()
    , obj_length()
    , obj_width()  {
    }
  ObjectExtended_(const ContainerAllocator& _alloc)
    : obj_arellong(_alloc)
    , obj_arellat(_alloc)
    , obj_class(_alloc)
    , obj_orientationangle(_alloc)
    , obj_length(_alloc)
    , obj_width(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_arellong_type;
  _obj_arellong_type obj_arellong;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_arellat_type;
  _obj_arellat_type obj_arellat;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _obj_class_type;
  _obj_class_type obj_class;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_orientationangle_type;
  _obj_orientationangle_type obj_orientationangle;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_length_type;
  _obj_length_type obj_length;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _obj_width_type;
  _obj_width_type obj_width;





  typedef boost::shared_ptr< ::radar_conti::ObjectExtended_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::ObjectExtended_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectExtended_

typedef ::radar_conti::ObjectExtended_<std::allocator<void> > ObjectExtended;

typedef boost::shared_ptr< ::radar_conti::ObjectExtended > ObjectExtendedPtr;
typedef boost::shared_ptr< ::radar_conti::ObjectExtended const> ObjectExtendedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::ObjectExtended_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::ObjectExtended_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::ObjectExtended_<ContainerAllocator1> & lhs, const ::radar_conti::ObjectExtended_<ContainerAllocator2> & rhs)
{
  return lhs.obj_arellong == rhs.obj_arellong &&
    lhs.obj_arellat == rhs.obj_arellat &&
    lhs.obj_class == rhs.obj_class &&
    lhs.obj_orientationangle == rhs.obj_orientationangle &&
    lhs.obj_length == rhs.obj_length &&
    lhs.obj_width == rhs.obj_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::ObjectExtended_<ContainerAllocator1> & lhs, const ::radar_conti::ObjectExtended_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ObjectExtended_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::ObjectExtended_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ObjectExtended_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::ObjectExtended_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ObjectExtended_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::ObjectExtended_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::ObjectExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96824e97e44bcd21a96fe4ebd1753186";
  }

  static const char* value(const ::radar_conti::ObjectExtended_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96824e97e44bcd21ULL;
  static const uint64_t static_value2 = 0xa96fe4ebd1753186ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::ObjectExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/ObjectExtended";
  }

  static const char* value(const ::radar_conti::ObjectExtended_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::ObjectExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  ------------------------------------------------------------------------\n"
"#\n"
"#  Name:       Obj_3_Extended\n"
"#  Id:         0x60d\n"
"#  Length:     8 bytes\n"
"#  Cycle time: 0 ms\n"
"#  Senders:    ARS_ISF\n"
"#  Layout:\n"
"#\n"
"#                          Bit\n"
"#\n"
"#             7   6   5   4   3   2   1   0\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         0 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Obj_ID\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         1 |<------------------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         2 |----------x|<------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                     +-- Obj_ArelLong\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         3 |--------------x|   |<---------x|\n"
"#     B     +---+---+---+---+---+---+---+---+\n"
"#     y                   |               +-- Obj_Class\n"
"#     t                   +-- Obj_ArelLat\n"
"#     e     +---+---+---+---+---+---+---+---+\n"
"#         4 |<------------------------------|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         5 |------x|   |   |   |   |   |   |\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                 +-- Obj_OrientationAngle\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         6 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Obj_Length\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         7 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Obj_Width\n"
"#\n"
"#  Signal tree:\n"
"#\n"
"#    -- {root}\n"
"#       +-- Obj_ID\n"
"#       +-- Obj_ArelLong\n"
"#       +-- Obj_ArelLat\n"
"#       +-- Obj_Class\n"
"#       +-- Obj_OrientationAngle\n"
"#       +-- Obj_Length\n"
"#       +-- Obj_Width\n"
"#\n"
"#  ------------------------------------------------------------------------\n"
"#\n"
"std_msgs/Float64 obj_arellong\n"
"std_msgs/Float64 obj_arellat\n"
"std_msgs/Int32 obj_class\n"
"std_msgs/Float64 obj_orientationangle\n"
"std_msgs/Float64 obj_length\n"
"std_msgs/Float64 obj_width\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::radar_conti::ObjectExtended_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::ObjectExtended_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_arellong);
      stream.next(m.obj_arellat);
      stream.next(m.obj_class);
      stream.next(m.obj_orientationangle);
      stream.next(m.obj_length);
      stream.next(m.obj_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectExtended_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::ObjectExtended_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::ObjectExtended_<ContainerAllocator>& v)
  {
    s << indent << "obj_arellong: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_arellong);
    s << indent << "obj_arellat: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_arellat);
    s << indent << "obj_class: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_class);
    s << indent << "obj_orientationangle: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_orientationangle);
    s << indent << "obj_length: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_length);
    s << indent << "obj_width: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.obj_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_OBJECTEXTENDED_H
