// Generated by gencpp from file radar_conti/VersionID.msg
// DO NOT EDIT!


#ifndef RADAR_CONTI_MESSAGE_VERSIONID_H
#define RADAR_CONTI_MESSAGE_VERSIONID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace radar_conti
{
template <class ContainerAllocator>
struct VersionID_
{
  typedef VersionID_<ContainerAllocator> Type;

  VersionID_()
    : header()
    , version_majorrelease()
    , version_minorrelease()
    , version_patchlevel()
    , version_extendedrange()
    , version_countrycode()  {
    }
  VersionID_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , version_majorrelease(_alloc)
    , version_minorrelease(_alloc)
    , version_patchlevel(_alloc)
    , version_extendedrange(_alloc)
    , version_countrycode(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _version_majorrelease_type;
  _version_majorrelease_type version_majorrelease;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _version_minorrelease_type;
  _version_minorrelease_type version_minorrelease;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _version_patchlevel_type;
  _version_patchlevel_type version_patchlevel;

   typedef  ::std_msgs::String_<ContainerAllocator>  _version_extendedrange_type;
  _version_extendedrange_type version_extendedrange;

   typedef  ::std_msgs::String_<ContainerAllocator>  _version_countrycode_type;
  _version_countrycode_type version_countrycode;





  typedef boost::shared_ptr< ::radar_conti::VersionID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_conti::VersionID_<ContainerAllocator> const> ConstPtr;

}; // struct VersionID_

typedef ::radar_conti::VersionID_<std::allocator<void> > VersionID;

typedef boost::shared_ptr< ::radar_conti::VersionID > VersionIDPtr;
typedef boost::shared_ptr< ::radar_conti::VersionID const> VersionIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_conti::VersionID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_conti::VersionID_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_conti::VersionID_<ContainerAllocator1> & lhs, const ::radar_conti::VersionID_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.version_majorrelease == rhs.version_majorrelease &&
    lhs.version_minorrelease == rhs.version_minorrelease &&
    lhs.version_patchlevel == rhs.version_patchlevel &&
    lhs.version_extendedrange == rhs.version_extendedrange &&
    lhs.version_countrycode == rhs.version_countrycode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_conti::VersionID_<ContainerAllocator1> & lhs, const ::radar_conti::VersionID_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_conti

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::VersionID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_conti::VersionID_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::VersionID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_conti::VersionID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::VersionID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_conti::VersionID_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_conti::VersionID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea1b12f3e20711755dbdd58cbc0c1b78";
  }

  static const char* value(const ::radar_conti::VersionID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea1b12f3e2071175ULL;
  static const uint64_t static_value2 = 0x5dbdd58cbc0c1b78ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_conti::VersionID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_conti/VersionID";
  }

  static const char* value(const ::radar_conti::VersionID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_conti::VersionID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  ------------------------------------------------------------------------\n"
"#\n"
"#  Name:       VersionID\n"
"#  Id:         0x700\n"
"#  Length:     4 bytes\n"
"#  Cycle time: 0 ms\n"
"#  Senders:    ARS_ISF\n"
"#  Layout:\n"
"#\n"
"#                          Bit\n"
"#\n"
"#             7   6   5   4   3   2   1   0\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         0 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Version_MajorRelease\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         1 |<-----------------------------x|\n"
"#     B     +---+---+---+---+---+---+---+---+\n"
"#     y                                   +-- Version_MinorRelease\n"
"#     t     +---+---+---+---+---+---+---+---+\n"
"#     e   2 |<-----------------------------x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                         +-- Version_PatchLevel\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#         3 |   |   |   |   |   |   |<-x|<-x|\n"
"#           +---+---+---+---+---+---+---+---+\n"
"#                                     |   +-- Version_CountryCode\n"
"#                                     +-- Version_ExtendedRange\n"
"#\n"
"#  Signal tree:\n"
"#\n"
"#    -- {root}\n"
"#       +-- Version_MajorRelease\n"
"#       +-- Version_MinorRelease\n"
"#       +-- Version_PatchLevel\n"
"#       +-- Version_ExtendedRange\n"
"#       +-- Version_CountryCode\n"
"#\n"
"#  ------------------------------------------------------------------------\n"
"std_msgs/Header header\n"
"std_msgs/Int32 version_majorrelease\n"
"std_msgs/Int32 version_minorrelease\n"
"std_msgs/Int32 version_patchlevel\n"
"std_msgs/String version_extendedrange\n"
"std_msgs/String version_countrycode\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::radar_conti::VersionID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_conti::VersionID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.version_majorrelease);
      stream.next(m.version_minorrelease);
      stream.next(m.version_patchlevel);
      stream.next(m.version_extendedrange);
      stream.next(m.version_countrycode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VersionID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_conti::VersionID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_conti::VersionID_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "version_majorrelease: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.version_majorrelease);
    s << indent << "version_minorrelease: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.version_minorrelease);
    s << indent << "version_patchlevel: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.version_patchlevel);
    s << indent << "version_extendedrange: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.version_extendedrange);
    s << indent << "version_countrycode: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.version_countrycode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_CONTI_MESSAGE_VERSIONID_H
